
test_04_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e8c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800612c  0800612c  0001612c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061e4  080061e4  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  080061e4  080061e4  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061e4  080061e4  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061e8  080061e8  000161e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  080061ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000078  08006264  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d8  080062c4  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004b48  24000138  08006324  00020138  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24004c80  08006324  00024c80  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002d88f  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004643  00000000  00000000  0004d9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f0  00000000  00000000  00052038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000015e8  00000000  00000000  00053728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bdab  00000000  00000000  00054d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a1b5  00000000  00000000  00090abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001918cc  00000000  00000000  000aac70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0023c53c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000063a8  00000000  00000000  0023c590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006114 	.word	0x08006114

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	08006114 	.word	0x08006114

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <SystemInit+0x104>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <SystemInit+0x104>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b3b      	ldr	r3, [pc, #236]	; (80003e4 <SystemInit+0x104>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a3a      	ldr	r2, [pc, #232]	; (80003e4 <SystemInit+0x104>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <SystemInit+0x108>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <SystemInit+0x108>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a34      	ldr	r2, [pc, #208]	; (80003e8 <SystemInit+0x108>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <SystemInit+0x10c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a32      	ldr	r2, [pc, #200]	; (80003ec <SystemInit+0x10c>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <SystemInit+0x10c>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2f      	ldr	r3, [pc, #188]	; (80003ec <SystemInit+0x10c>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492e      	ldr	r1, [pc, #184]	; (80003ec <SystemInit+0x10c>)
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <SystemInit+0x110>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <SystemInit+0x108>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <SystemInit+0x108>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <SystemInit+0x108>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <SystemInit+0x10c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <SystemInit+0x10c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b22      	ldr	r3, [pc, #136]	; (80003ec <SystemInit+0x10c>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036a:	4a22      	ldr	r2, [pc, #136]	; (80003f4 <SystemInit+0x114>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <SystemInit+0x10c>)
 8000370:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <SystemInit+0x118>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <SystemInit+0x10c>)
 8000376:	4a21      	ldr	r2, [pc, #132]	; (80003fc <SystemInit+0x11c>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <SystemInit+0x10c>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <SystemInit+0x10c>)
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <SystemInit+0x11c>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <SystemInit+0x10c>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <SystemInit+0x10c>)
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <SystemInit+0x11c>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <SystemInit+0x10c>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <SystemInit+0x10c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <SystemInit+0x10c>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <SystemInit+0x10c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SystemInit+0x120>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <SystemInit+0x120>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <SystemInit+0x124>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SystemInit+0x128>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <SystemInit+0x12c>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <SystemInit+0x130>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <SystemInit+0x104>)
 80003d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000ed00 	.word	0xe000ed00
 80003e8:	52002000 	.word	0x52002000
 80003ec:	58024400 	.word	0x58024400
 80003f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003f4:	02020200 	.word	0x02020200
 80003f8:	01ff0000 	.word	0x01ff0000
 80003fc:	01010280 	.word	0x01010280
 8000400:	580000c0 	.word	0x580000c0
 8000404:	5c001000 	.word	0x5c001000
 8000408:	ffff0000 	.word	0xffff0000
 800040c:	51008108 	.word	0x51008108
 8000410:	52004000 	.word	0x52004000

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800041a:	4b3b      	ldr	r3, [pc, #236]	; (8000508 <main+0xf4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d11b      	bne.n	800045e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000426:	f3bf 8f4f 	dsb	sy
}
 800042a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800042c:	f3bf 8f6f 	isb	sy
}
 8000430:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000432:	4b35      	ldr	r3, [pc, #212]	; (8000508 <main+0xf4>)
 8000434:	2200      	movs	r2, #0
 8000436:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800043a:	f3bf 8f4f 	dsb	sy
}
 800043e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000440:	f3bf 8f6f 	isb	sy
}
 8000444:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000446:	4b30      	ldr	r3, [pc, #192]	; (8000508 <main+0xf4>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a2f      	ldr	r2, [pc, #188]	; (8000508 <main+0xf4>)
 800044c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000450:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000452:	f3bf 8f4f 	dsb	sy
}
 8000456:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000458:	f3bf 8f6f 	isb	sy
}
 800045c:	e000      	b.n	8000460 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800045e:	bf00      	nop
  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000464:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000466:	bf00      	nop
 8000468:	4b28      	ldr	r3, [pc, #160]	; (800050c <main+0xf8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000470:	2b00      	cmp	r3, #0
 8000472:	d004      	beq.n	800047e <main+0x6a>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	1e5a      	subs	r2, r3, #1
 8000478:	607a      	str	r2, [r7, #4]
 800047a:	2b00      	cmp	r3, #0
 800047c:	dcf4      	bgt.n	8000468 <main+0x54>
  if ( timeout < 0 )
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	da01      	bge.n	8000488 <main+0x74>
  {
  Error_Handler();
 8000484:	f000 f952 	bl	800072c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fadc 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f846 	bl	800051c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <main+0xf8>)
 8000492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000496:	4a1d      	ldr	r2, [pc, #116]	; (800050c <main+0xf8>)
 8000498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800049c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <main+0xf8>)
 80004a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004ae:	2000      	movs	r0, #0
 80004b0:	f000 fde8 	bl	8001084 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004b4:	2100      	movs	r1, #0
 80004b6:	2000      	movs	r0, #0
 80004b8:	f000 fdfe 	bl	80010b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004c0:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004c2:	bf00      	nop
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <main+0xf8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d104      	bne.n	80004da <main+0xc6>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	1e5a      	subs	r2, r3, #1
 80004d4:	607a      	str	r2, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	dcf4      	bgt.n	80004c4 <main+0xb0>
if ( timeout < 0 )
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da01      	bge.n	80004e4 <main+0xd0>
{
Error_Handler();
 80004e0:	f000 f924 	bl	800072c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8d0 	bl	8000688 <MX_GPIO_Init>
  MX_ETH_Init();
 80004e8:	f000 f882 	bl	80005f0 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f002 f954 	bl	8002798 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <main+0xfc>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x100>)
 80004f6:	f002 f999 	bl	800282c <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <main+0x104>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000500:	f002 f96e 	bl	80027e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0xf0>
 8000506:	bf00      	nop
 8000508:	e000ed00 	.word	0xe000ed00
 800050c:	58024400 	.word	0x58024400
 8000510:	08006160 	.word	0x08006160
 8000514:	080006f9 	.word	0x080006f9
 8000518:	24004b38 	.word	0x24004b38

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b09c      	sub	sp, #112	; 0x70
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000526:	224c      	movs	r2, #76	; 0x4c
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f005 fd24 	bl	8005f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2220      	movs	r2, #32
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f005 fd1e 	bl	8005f78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800053c:	2004      	movs	r0, #4
 800053e:	f000 fdcf 	bl	80010e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054a:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054c:	f023 0301 	bic.w	r3, r3, #1
 8000550:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <SystemClock_Config+0xd0>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000578:	bf00      	nop
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <SystemClock_Config+0xd0>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000586:	d1f8      	bne.n	800057a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800058c:	2301      	movs	r3, #1
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2340      	movs	r3, #64	; 0x40
 8000592:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fdf9 	bl	8001194 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005a8:	f000 f8c0 	bl	800072c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	233f      	movs	r3, #63	; 0x3f
 80005ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2101      	movs	r1, #1
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fa0b 	bl	80019ec <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f8a6 	bl	800072c <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3770      	adds	r7, #112	; 0x70
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	58000400 	.word	0x58000400
 80005ec:	58024800 	.word	0x58024800

080005f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_ETH_Init+0x80>)
 80005f6:	4a1f      	ldr	r2, [pc, #124]	; (8000674 <MX_ETH_Init+0x84>)
 80005f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_ETH_Init+0x88>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_ETH_Init+0x88>)
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_ETH_Init+0x88>)
 8000608:	22e1      	movs	r2, #225	; 0xe1
 800060a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_ETH_Init+0x88>)
 800060e:	2200      	movs	r2, #0
 8000610:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_ETH_Init+0x88>)
 8000614:	2200      	movs	r2, #0
 8000616:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_ETH_Init+0x88>)
 800061a:	2200      	movs	r2, #0
 800061c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_ETH_Init+0x80>)
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <MX_ETH_Init+0x88>)
 8000622:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_ETH_Init+0x80>)
 8000626:	2201      	movs	r2, #1
 8000628:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ETH_Init+0x80>)
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <MX_ETH_Init+0x8c>)
 800062e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_ETH_Init+0x80>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_ETH_Init+0x90>)
 8000634:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_ETH_Init+0x80>)
 8000638:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800063c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800063e:	480c      	ldr	r0, [pc, #48]	; (8000670 <MX_ETH_Init+0x80>)
 8000640:	f004 ff16 	bl	8005470 <HAL_ETH_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800064a:	f000 f86f 	bl	800072c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_ETH_Init+0x94>)
 8000654:	f005 fc90 	bl	8005f78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_ETH_Init+0x94>)
 800065a:	2221      	movs	r2, #33	; 0x21
 800065c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_ETH_Init+0x94>)
 8000660:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000664:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000666:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_ETH_Init+0x94>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	24004b3c 	.word	0x24004b3c
 8000674:	40028000 	.word	0x40028000
 8000678:	24000154 	.word	0x24000154
 800067c:	240000d8 	.word	0x240000d8
 8000680:	24000078 	.word	0x24000078
 8000684:	24004bb0 	.word	0x24004bb0

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_GPIO_Init+0x6c>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_GPIO_Init+0x6c>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006d2:	f043 0302 	orr.w	r3, r3, #2
 80006d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e0:	f003 0302 	and.w	r3, r3, #2
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	58024400 	.word	0x58024400

080006f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f002 f925 	bl	8002950 <osDelay>
 8000706:	e7fb      	b.n	8000700 <StartDefaultTask+0x8>

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d101      	bne.n	800071e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071a:	f000 f9cf 	bl	8000abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40010000 	.word	0x40010000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_MspInit+0x38>)
 8000740:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000744:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_MspInit+0x38>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_MspInit+0x38>)
 8000750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	210f      	movs	r1, #15
 8000760:	f06f 0001 	mvn.w	r0, #1
 8000764:	f000 faa2 	bl	8000cac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	58024400 	.word	0x58024400

08000774 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	; 0x38
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a4d      	ldr	r2, [pc, #308]	; (80008c8 <HAL_ETH_MspInit+0x154>)
 8000792:	4293      	cmp	r3, r2
 8000794:	f040 8093 	bne.w	80008be <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000798:	4b4c      	ldr	r3, [pc, #304]	; (80008cc <HAL_ETH_MspInit+0x158>)
 800079a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800079e:	4a4b      	ldr	r2, [pc, #300]	; (80008cc <HAL_ETH_MspInit+0x158>)
 80007a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007a8:	4b48      	ldr	r3, [pc, #288]	; (80008cc <HAL_ETH_MspInit+0x158>)
 80007aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007b2:	623b      	str	r3, [r7, #32]
 80007b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80007b6:	4b45      	ldr	r3, [pc, #276]	; (80008cc <HAL_ETH_MspInit+0x158>)
 80007b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007bc:	4a43      	ldr	r2, [pc, #268]	; (80008cc <HAL_ETH_MspInit+0x158>)
 80007be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007c6:	4b41      	ldr	r3, [pc, #260]	; (80008cc <HAL_ETH_MspInit+0x158>)
 80007c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007d0:	61fb      	str	r3, [r7, #28]
 80007d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80007d4:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <HAL_ETH_MspInit+0x158>)
 80007d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007da:	4a3c      	ldr	r2, [pc, #240]	; (80008cc <HAL_ETH_MspInit+0x158>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007e4:	4b39      	ldr	r3, [pc, #228]	; (80008cc <HAL_ETH_MspInit+0x158>)
 80007e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b36      	ldr	r3, [pc, #216]	; (80008cc <HAL_ETH_MspInit+0x158>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	4a34      	ldr	r2, [pc, #208]	; (80008cc <HAL_ETH_MspInit+0x158>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <HAL_ETH_MspInit+0x158>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <HAL_ETH_MspInit+0x158>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <HAL_ETH_MspInit+0x158>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <HAL_ETH_MspInit+0x158>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <HAL_ETH_MspInit+0x158>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a25      	ldr	r2, [pc, #148]	; (80008cc <HAL_ETH_MspInit+0x158>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <HAL_ETH_MspInit+0x158>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800084c:	2332      	movs	r3, #50	; 0x32
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085c:	230b      	movs	r3, #11
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	4619      	mov	r1, r3
 8000866:	481a      	ldr	r0, [pc, #104]	; (80008d0 <HAL_ETH_MspInit+0x15c>)
 8000868:	f000 fa5c 	bl	8000d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800086c:	2386      	movs	r3, #134	; 0x86
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087c:	230b      	movs	r3, #11
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <HAL_ETH_MspInit+0x160>)
 8000888:	f000 fa4c 	bl	8000d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800088c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089e:	230b      	movs	r3, #11
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	4619      	mov	r1, r3
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <HAL_ETH_MspInit+0x164>)
 80008aa:	f000 fa3b 	bl	8000d24 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203d      	movs	r0, #61	; 0x3d
 80008b4:	f000 f9fa 	bl	8000cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80008b8:	203d      	movs	r0, #61	; 0x3d
 80008ba:	f000 fa11 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3738      	adds	r7, #56	; 0x38
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40028000 	.word	0x40028000
 80008cc:	58024400 	.word	0x58024400
 80008d0:	58020800 	.word	0x58020800
 80008d4:	58020000 	.word	0x58020000
 80008d8:	58020400 	.word	0x58020400

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	; 0x38
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b0f      	cmp	r3, #15
 80008e8:	d842      	bhi.n	8000970 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80008ea:	2200      	movs	r2, #0
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	2019      	movs	r0, #25
 80008f0:	f000 f9dc 	bl	8000cac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008f4:	2019      	movs	r0, #25
 80008f6:	f000 f9f3 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80008fa:	4a23      	ldr	r2, [pc, #140]	; (8000988 <HAL_InitTick+0xac>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <HAL_InitTick+0xb0>)
 8000902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000906:	4a21      	ldr	r2, [pc, #132]	; (800098c <HAL_InitTick+0xb0>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <HAL_InitTick+0xb0>)
 8000912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800091e:	f107 020c 	add.w	r2, r7, #12
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fbd5 	bl	80020d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800092e:	f001 fbbd 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 8000932:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <HAL_InitTick+0xb4>)
 8000938:	fba2 2303 	umull	r2, r3, r2, r3
 800093c:	0c9b      	lsrs	r3, r3, #18
 800093e:	3b01      	subs	r3, #1
 8000940:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_InitTick+0xb8>)
 8000944:	4a14      	ldr	r2, [pc, #80]	; (8000998 <HAL_InitTick+0xbc>)
 8000946:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0xb8>)
 800094a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800094e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_InitTick+0xb8>)
 8000952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000954:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_InitTick+0xb8>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_InitTick+0xb8>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000962:	480c      	ldr	r0, [pc, #48]	; (8000994 <HAL_InitTick+0xb8>)
 8000964:	f001 fbfa 	bl	800215c <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d107      	bne.n	800097e <HAL_InitTick+0xa2>
 800096e:	e001      	b.n	8000974 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	e005      	b.n	8000980 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <HAL_InitTick+0xb8>)
 8000976:	f001 fc53 	bl	8002220 <HAL_TIM_Base_Start_IT>
 800097a:	4603      	mov	r3, r0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3738      	adds	r7, #56	; 0x38
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	24000008 	.word	0x24000008
 800098c:	58024400 	.word	0x58024400
 8000990:	431bde83 	.word	0x431bde83
 8000994:	24004be4 	.word	0x24004be4
 8000998:	40010000 	.word	0x40010000

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM1_UP_IRQHandler+0x10>)
 80009ce:	f001 fc9f 	bl	8002310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	24004be4 	.word	0x24004be4

080009dc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <ETH_IRQHandler+0x10>)
 80009e2:	f004 fe2f 	bl	8005644 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24004b3c 	.word	0x24004b3c

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f4:	f7ff fc74 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	; (8000a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	; (8000a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f005 fa77 	bl	8005f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a22:	f7ff fcf7 	bl	8000414 <main>
  bx  lr
 8000a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a30:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000a34:	080061ec 	.word	0x080061ec
  ldr r2, =_sbss
 8000a38:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8000a3c:	24004c80 	.word	0x24004c80

08000a40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC3_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4a:	2003      	movs	r0, #3
 8000a4c:	f000 f923 	bl	8000c96 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a50:	f001 f982 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8000a54:	4602      	mov	r2, r0
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_Init+0x68>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	0a1b      	lsrs	r3, r3, #8
 8000a5c:	f003 030f 	and.w	r3, r3, #15
 8000a60:	4913      	ldr	r1, [pc, #76]	; (8000ab0 <HAL_Init+0x6c>)
 8000a62:	5ccb      	ldrb	r3, [r1, r3]
 8000a64:	f003 031f 	and.w	r3, r3, #31
 8000a68:	fa22 f303 	lsr.w	r3, r2, r3
 8000a6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_Init+0x68>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_Init+0x6c>)
 8000a78:	5cd3      	ldrb	r3, [r2, r3]
 8000a7a:	f003 031f 	and.w	r3, r3, #31
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	fa22 f303 	lsr.w	r3, r2, r3
 8000a84:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <HAL_Init+0x70>)
 8000a86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a88:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <HAL_Init+0x74>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f7ff ff24 	bl	80008dc <HAL_InitTick>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e002      	b.n	8000aa4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9e:	f7ff fe4b 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	58024400 	.word	0x58024400
 8000ab0:	08006150 	.word	0x08006150
 8000ab4:	24000004 	.word	0x24000004
 8000ab8:	24000000 	.word	0x24000000

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2400000c 	.word	0x2400000c
 8000ae0:	24004c30 	.word	0x24004c30

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	24004c30 	.word	0x24004c30

08000afc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetREVID+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	0c1b      	lsrs	r3, r3, #16
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	5c001000 	.word	0x5c001000

08000b14 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000b24:	4904      	ldr	r1, [pc, #16]	; (8000b38 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	604b      	str	r3, [r1, #4]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	58000400 	.word	0x58000400

08000b3c <__NVIC_SetPriorityGrouping>:
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <__NVIC_SetPriorityGrouping+0x40>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	4313      	orrs	r3, r2
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x40>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00
 8000b80:	05fa0000 	.word	0x05fa0000

08000b84 <__NVIC_GetPriorityGrouping>:
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_EnableIRQ>:
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db0b      	blt.n	8000bca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <__NVIC_EnableIRQ+0x38>)
 8000bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff4c 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cba:	f7ff ff63 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000cbe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	6978      	ldr	r0, [r7, #20]
 8000cc6:	f7ff ffb3 	bl	8000c30 <NVIC_EncodePriority>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff82 	bl	8000bdc <__NVIC_SetPriority>
}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff56 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <HAL_GetCurrentCPUID+0x24>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	d101      	bne.n	8000d12 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e000      	b.n	8000d14 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8000d12:	2301      	movs	r3, #1
  }
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d32:	4b89      	ldr	r3, [pc, #548]	; (8000f58 <HAL_GPIO_Init+0x234>)
 8000d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d36:	e194      	b.n	8001062 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 8186 	beq.w	800105c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d005      	beq.n	8000d68 <HAL_GPIO_Init+0x44>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d130      	bne.n	8000dca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	2203      	movs	r2, #3
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d9e:	2201      	movs	r2, #1
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	091b      	lsrs	r3, r3, #4
 8000db4:	f003 0201 	and.w	r2, r3, #1
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d017      	beq.n	8000e06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d123      	bne.n	8000e5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	08da      	lsrs	r2, r3, #3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3208      	adds	r2, #8
 8000e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	691a      	ldr	r2, [r3, #16]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3208      	adds	r2, #8
 8000e54:	69b9      	ldr	r1, [r7, #24]
 8000e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0203 	and.w	r2, r3, #3
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 80e0 	beq.w	800105c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <HAL_GPIO_Init+0x238>)
 8000e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea2:	4a2e      	ldr	r2, [pc, #184]	; (8000f5c <HAL_GPIO_Init+0x238>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <HAL_GPIO_Init+0x238>)
 8000eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eba:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <HAL_GPIO_Init+0x23c>)
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <HAL_GPIO_Init+0x240>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d052      	beq.n	8000f8c <HAL_GPIO_Init+0x268>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_GPIO_Init+0x244>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d031      	beq.n	8000f52 <HAL_GPIO_Init+0x22e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <HAL_GPIO_Init+0x248>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d02b      	beq.n	8000f4e <HAL_GPIO_Init+0x22a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <HAL_GPIO_Init+0x24c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d025      	beq.n	8000f4a <HAL_GPIO_Init+0x226>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <HAL_GPIO_Init+0x250>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d01f      	beq.n	8000f46 <HAL_GPIO_Init+0x222>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <HAL_GPIO_Init+0x254>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d019      	beq.n	8000f42 <HAL_GPIO_Init+0x21e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <HAL_GPIO_Init+0x258>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0x21a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_GPIO_Init+0x25c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00d      	beq.n	8000f3a <HAL_GPIO_Init+0x216>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <HAL_GPIO_Init+0x260>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d007      	beq.n	8000f36 <HAL_GPIO_Init+0x212>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_GPIO_Init+0x264>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <HAL_GPIO_Init+0x20e>
 8000f2e:	2309      	movs	r3, #9
 8000f30:	e02d      	b.n	8000f8e <HAL_GPIO_Init+0x26a>
 8000f32:	230a      	movs	r3, #10
 8000f34:	e02b      	b.n	8000f8e <HAL_GPIO_Init+0x26a>
 8000f36:	2308      	movs	r3, #8
 8000f38:	e029      	b.n	8000f8e <HAL_GPIO_Init+0x26a>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e027      	b.n	8000f8e <HAL_GPIO_Init+0x26a>
 8000f3e:	2306      	movs	r3, #6
 8000f40:	e025      	b.n	8000f8e <HAL_GPIO_Init+0x26a>
 8000f42:	2305      	movs	r3, #5
 8000f44:	e023      	b.n	8000f8e <HAL_GPIO_Init+0x26a>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e021      	b.n	8000f8e <HAL_GPIO_Init+0x26a>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e01f      	b.n	8000f8e <HAL_GPIO_Init+0x26a>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e01d      	b.n	8000f8e <HAL_GPIO_Init+0x26a>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e01b      	b.n	8000f8e <HAL_GPIO_Init+0x26a>
 8000f56:	bf00      	nop
 8000f58:	58000080 	.word	0x58000080
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	58000400 	.word	0x58000400
 8000f64:	58020000 	.word	0x58020000
 8000f68:	58020400 	.word	0x58020400
 8000f6c:	58020800 	.word	0x58020800
 8000f70:	58020c00 	.word	0x58020c00
 8000f74:	58021000 	.word	0x58021000
 8000f78:	58021400 	.word	0x58021400
 8000f7c:	58021800 	.word	0x58021800
 8000f80:	58021c00 	.word	0x58021c00
 8000f84:	58022000 	.word	0x58022000
 8000f88:	58022400 	.word	0x58022400
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	f002 0203 	and.w	r2, r2, #3
 8000f94:	0092      	lsls	r2, r2, #2
 8000f96:	4093      	lsls	r3, r2
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f9e:	4938      	ldr	r1, [pc, #224]	; (8001080 <HAL_GPIO_Init+0x35c>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	3301      	adds	r3, #1
 8001060:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa22 f303 	lsr.w	r3, r2, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	f47f ae63 	bne.w	8000d38 <HAL_GPIO_Init+0x14>
  }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	3724      	adds	r7, #36	; 0x24
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	58000400 	.word	0x58000400

08001084 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800108c:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_HSEM_FastTake+0x2c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3320      	adds	r3, #32
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_HSEM_FastTake+0x30>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	e000      	b.n	80010a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	58026400 	.word	0x58026400
 80010b4:	80000300 	.word	0x80000300

080010b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80010c2:	4906      	ldr	r1, [pc, #24]	; (80010dc <HAL_HSEM_Release+0x24>)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	58026400 	.word	0x58026400

080010e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <HAL_PWREx_ConfigSupply+0xb0>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	2b06      	cmp	r3, #6
 80010f2:	d00a      	beq.n	800110a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <HAL_PWREx_ConfigSupply+0xb0>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d001      	beq.n	8001106 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e040      	b.n	8001188 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e03e      	b.n	8001188 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_PWREx_ConfigSupply+0xb0>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001112:	491f      	ldr	r1, [pc, #124]	; (8001190 <HAL_PWREx_ConfigSupply+0xb0>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4313      	orrs	r3, r2
 8001118:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800111a:	f7ff fce3 	bl	8000ae4 <HAL_GetTick>
 800111e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001120:	e009      	b.n	8001136 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001122:	f7ff fcdf 	bl	8000ae4 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001130:	d901      	bls.n	8001136 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e028      	b.n	8001188 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_PWREx_ConfigSupply+0xb0>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800113e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001142:	d1ee      	bne.n	8001122 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b1e      	cmp	r3, #30
 8001148:	d008      	beq.n	800115c <HAL_PWREx_ConfigSupply+0x7c>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b2e      	cmp	r3, #46	; 0x2e
 800114e:	d005      	beq.n	800115c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b1d      	cmp	r3, #29
 8001154:	d002      	beq.n	800115c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b2d      	cmp	r3, #45	; 0x2d
 800115a:	d114      	bne.n	8001186 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800115c:	f7ff fcc2 	bl	8000ae4 <HAL_GetTick>
 8001160:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001162:	e009      	b.n	8001178 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001164:	f7ff fcbe 	bl	8000ae4 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001172:	d901      	bls.n	8001178 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e007      	b.n	8001188 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_PWREx_ConfigSupply+0xb0>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001184:	d1ee      	bne.n	8001164 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	58024800 	.word	0x58024800

08001194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	f000 bc1c 	b.w	80019e0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 8087 	beq.w	80012c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b6:	4b9e      	ldr	r3, [pc, #632]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011c0:	4b9b      	ldr	r3, [pc, #620]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c8:	2b10      	cmp	r3, #16
 80011ca:	d007      	beq.n	80011dc <HAL_RCC_OscConfig+0x48>
 80011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ce:	2b18      	cmp	r3, #24
 80011d0:	d110      	bne.n	80011f4 <HAL_RCC_OscConfig+0x60>
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d10b      	bne.n	80011f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	4b94      	ldr	r3, [pc, #592]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d06c      	beq.n	80012c2 <HAL_RCC_OscConfig+0x12e>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d168      	bne.n	80012c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e3f5      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fc:	d106      	bne.n	800120c <HAL_RCC_OscConfig+0x78>
 80011fe:	4b8c      	ldr	r3, [pc, #560]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a8b      	ldr	r2, [pc, #556]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e02e      	b.n	800126a <HAL_RCC_OscConfig+0xd6>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10c      	bne.n	800122e <HAL_RCC_OscConfig+0x9a>
 8001214:	4b86      	ldr	r3, [pc, #536]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a85      	ldr	r2, [pc, #532]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 800121a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b83      	ldr	r3, [pc, #524]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a82      	ldr	r2, [pc, #520]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e01d      	b.n	800126a <HAL_RCC_OscConfig+0xd6>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001236:	d10c      	bne.n	8001252 <HAL_RCC_OscConfig+0xbe>
 8001238:	4b7d      	ldr	r3, [pc, #500]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a7c      	ldr	r2, [pc, #496]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 800123e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b7a      	ldr	r3, [pc, #488]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a79      	ldr	r2, [pc, #484]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 800124a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e00b      	b.n	800126a <HAL_RCC_OscConfig+0xd6>
 8001252:	4b77      	ldr	r3, [pc, #476]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a76      	ldr	r2, [pc, #472]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b74      	ldr	r3, [pc, #464]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a73      	ldr	r2, [pc, #460]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d013      	beq.n	800129a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fc37 	bl	8000ae4 <HAL_GetTick>
 8001276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127a:	f7ff fc33 	bl	8000ae4 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	; 0x64
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e3a9      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800128c:	4b68      	ldr	r3, [pc, #416]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0xe6>
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fc23 	bl	8000ae4 <HAL_GetTick>
 800129e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a2:	f7ff fc1f 	bl	8000ae4 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b64      	cmp	r3, #100	; 0x64
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e395      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012b4:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x10e>
 80012c0:	e000      	b.n	80012c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80ca 	beq.w	8001466 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d2:	4b57      	ldr	r3, [pc, #348]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012dc:	4b54      	ldr	r3, [pc, #336]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <HAL_RCC_OscConfig+0x164>
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	2b18      	cmp	r3, #24
 80012ec:	d156      	bne.n	800139c <HAL_RCC_OscConfig+0x208>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d151      	bne.n	800139c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f8:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_RCC_OscConfig+0x17c>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e367      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001310:	4b47      	ldr	r3, [pc, #284]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 0219 	bic.w	r2, r3, #25
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4944      	ldr	r1, [pc, #272]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001322:	f7ff fbdf 	bl	8000ae4 <HAL_GetTick>
 8001326:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff fbdb 	bl	8000ae4 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e351      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800133c:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	f7ff fbd8 	bl	8000afc <HAL_GetREVID>
 800134c:	4603      	mov	r3, r0
 800134e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001352:	4293      	cmp	r3, r2
 8001354:	d817      	bhi.n	8001386 <HAL_RCC_OscConfig+0x1f2>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b40      	cmp	r3, #64	; 0x40
 800135c:	d108      	bne.n	8001370 <HAL_RCC_OscConfig+0x1dc>
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001366:	4a32      	ldr	r2, [pc, #200]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800136e:	e07a      	b.n	8001466 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	031b      	lsls	r3, r3, #12
 800137e:	492c      	ldr	r1, [pc, #176]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001384:	e06f      	b.n	8001466 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	061b      	lsls	r3, r3, #24
 8001394:	4926      	ldr	r1, [pc, #152]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800139a:	e064      	b.n	8001466 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d047      	beq.n	8001434 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 0219 	bic.w	r2, r3, #25
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	491f      	ldr	r1, [pc, #124]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fb95 	bl	8000ae4 <HAL_GetTick>
 80013ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fb91 	bl	8000ae4 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e307      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	f7ff fb8e 	bl	8000afc <HAL_GetREVID>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d817      	bhi.n	800141a <HAL_RCC_OscConfig+0x286>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b40      	cmp	r3, #64	; 0x40
 80013f0:	d108      	bne.n	8001404 <HAL_RCC_OscConfig+0x270>
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	6053      	str	r3, [r2, #4]
 8001402:	e030      	b.n	8001466 <HAL_RCC_OscConfig+0x2d2>
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	031b      	lsls	r3, r3, #12
 8001412:	4907      	ldr	r1, [pc, #28]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e025      	b.n	8001466 <HAL_RCC_OscConfig+0x2d2>
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	061b      	lsls	r3, r3, #24
 8001428:	4901      	ldr	r1, [pc, #4]	; (8001430 <HAL_RCC_OscConfig+0x29c>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
 800142e:	e01a      	b.n	8001466 <HAL_RCC_OscConfig+0x2d2>
 8001430:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001434:	4b9e      	ldr	r3, [pc, #632]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a9d      	ldr	r2, [pc, #628]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fb50 	bl	8000ae4 <HAL_GetTick>
 8001444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fb4c 	bl	8000ae4 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e2c2      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800145a:	4b95      	ldr	r3, [pc, #596]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80a9 	beq.w	80015c6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001474:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800147c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800147e:	4b8c      	ldr	r3, [pc, #560]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2b08      	cmp	r3, #8
 8001488:	d007      	beq.n	800149a <HAL_RCC_OscConfig+0x306>
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b18      	cmp	r3, #24
 800148e:	d13a      	bne.n	8001506 <HAL_RCC_OscConfig+0x372>
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d135      	bne.n	8001506 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_RCC_OscConfig+0x31e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	2b80      	cmp	r3, #128	; 0x80
 80014ac:	d001      	beq.n	80014b2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e296      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014b2:	f7ff fb23 	bl	8000afc <HAL_GetREVID>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80014bc:	4293      	cmp	r3, r2
 80014be:	d817      	bhi.n	80014f0 <HAL_RCC_OscConfig+0x35c>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	2b20      	cmp	r3, #32
 80014c6:	d108      	bne.n	80014da <HAL_RCC_OscConfig+0x346>
 80014c8:	4b79      	ldr	r3, [pc, #484]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014d0:	4a77      	ldr	r2, [pc, #476]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 80014d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014d6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014d8:	e075      	b.n	80015c6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014da:	4b75      	ldr	r3, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	069b      	lsls	r3, r3, #26
 80014e8:	4971      	ldr	r1, [pc, #452]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014ee:	e06a      	b.n	80015c6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014f0:	4b6f      	ldr	r3, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	496c      	ldr	r1, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001500:	4313      	orrs	r3, r2
 8001502:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001504:	e05f      	b.n	80015c6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d042      	beq.n	8001594 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800150e:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a67      	ldr	r2, [pc, #412]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fae3 	bl	8000ae4 <HAL_GetTick>
 800151e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001522:	f7ff fadf 	bl	8000ae4 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e255      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001534:	4b5e      	ldr	r3, [pc, #376]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001540:	f7ff fadc 	bl	8000afc <HAL_GetREVID>
 8001544:	4603      	mov	r3, r0
 8001546:	f241 0203 	movw	r2, #4099	; 0x1003
 800154a:	4293      	cmp	r3, r2
 800154c:	d817      	bhi.n	800157e <HAL_RCC_OscConfig+0x3ea>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	2b20      	cmp	r3, #32
 8001554:	d108      	bne.n	8001568 <HAL_RCC_OscConfig+0x3d4>
 8001556:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800155e:	4a54      	ldr	r2, [pc, #336]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001564:	6053      	str	r3, [r2, #4]
 8001566:	e02e      	b.n	80015c6 <HAL_RCC_OscConfig+0x432>
 8001568:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	069b      	lsls	r3, r3, #26
 8001576:	494e      	ldr	r1, [pc, #312]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
 800157c:	e023      	b.n	80015c6 <HAL_RCC_OscConfig+0x432>
 800157e:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	061b      	lsls	r3, r3, #24
 800158c:	4948      	ldr	r1, [pc, #288]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 800158e:	4313      	orrs	r3, r2
 8001590:	60cb      	str	r3, [r1, #12]
 8001592:	e018      	b.n	80015c6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001594:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a45      	ldr	r2, [pc, #276]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 800159a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800159e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff faa0 	bl	8000ae4 <HAL_GetTick>
 80015a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80015a8:	f7ff fa9c 	bl	8000ae4 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e212      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d036      	beq.n	8001640 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d019      	beq.n	800160e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015da:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 80015dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015de:	4a34      	ldr	r2, [pc, #208]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e6:	f7ff fa7d 	bl	8000ae4 <HAL_GetTick>
 80015ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fa79 	bl	8000ae4 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1ef      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x45a>
 800160c:	e018      	b.n	8001640 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001612:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff fa63 	bl	8000ae4 <HAL_GetTick>
 800161e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fa5f 	bl	8000ae4 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1d5      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	2b00      	cmp	r3, #0
 800164a:	d039      	beq.n	80016c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d019      	beq.n	8001688 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 800165a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800165e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001660:	f7ff fa40 	bl	8000ae4 <HAL_GetTick>
 8001664:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001668:	f7ff fa3c 	bl	8000ae4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1b2      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x4d4>
 8001686:	e01b      	b.n	80016c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_RCC_OscConfig+0x51c>)
 800168e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001692:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001694:	f7ff fa26 	bl	8000ae4 <HAL_GetTick>
 8001698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800169c:	f7ff fa22 	bl	8000ae4 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d904      	bls.n	80016b4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e198      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
 80016ae:	bf00      	nop
 80016b0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016b4:	4ba3      	ldr	r3, [pc, #652]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1ed      	bne.n	800169c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 8081 	beq.w	80017d0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016ce:	4b9e      	ldr	r3, [pc, #632]	; (8001948 <HAL_RCC_OscConfig+0x7b4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a9d      	ldr	r2, [pc, #628]	; (8001948 <HAL_RCC_OscConfig+0x7b4>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016da:	f7ff fa03 	bl	8000ae4 <HAL_GetTick>
 80016de:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff f9ff 	bl	8000ae4 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	; 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e175      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016f4:	4b94      	ldr	r3, [pc, #592]	; (8001948 <HAL_RCC_OscConfig+0x7b4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x582>
 8001708:	4b8e      	ldr	r3, [pc, #568]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a8d      	ldr	r2, [pc, #564]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
 8001714:	e02d      	b.n	8001772 <HAL_RCC_OscConfig+0x5de>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x5a4>
 800171e:	4b89      	ldr	r3, [pc, #548]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	4a88      	ldr	r2, [pc, #544]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6713      	str	r3, [r2, #112]	; 0x70
 800172a:	4b86      	ldr	r3, [pc, #536]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	4a85      	ldr	r2, [pc, #532]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
 8001736:	e01c      	b.n	8001772 <HAL_RCC_OscConfig+0x5de>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b05      	cmp	r3, #5
 800173e:	d10c      	bne.n	800175a <HAL_RCC_OscConfig+0x5c6>
 8001740:	4b80      	ldr	r3, [pc, #512]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4a7f      	ldr	r2, [pc, #508]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6713      	str	r3, [r2, #112]	; 0x70
 800174c:	4b7d      	ldr	r3, [pc, #500]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a7c      	ldr	r2, [pc, #496]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
 8001758:	e00b      	b.n	8001772 <HAL_RCC_OscConfig+0x5de>
 800175a:	4b7a      	ldr	r3, [pc, #488]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a79      	ldr	r2, [pc, #484]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
 8001766:	4b77      	ldr	r3, [pc, #476]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	4a76      	ldr	r2, [pc, #472]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d015      	beq.n	80017a6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff f9b3 	bl	8000ae4 <HAL_GetTick>
 800177e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff f9af 	bl	8000ae4 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e123      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ee      	beq.n	8001782 <HAL_RCC_OscConfig+0x5ee>
 80017a4:	e014      	b.n	80017d0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff f99d 	bl	8000ae4 <HAL_GetTick>
 80017aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff f999 	bl	8000ae4 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e10d      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017c4:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1ee      	bne.n	80017ae <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8102 	beq.w	80019de <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017da:	4b5a      	ldr	r3, [pc, #360]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017e2:	2b18      	cmp	r3, #24
 80017e4:	f000 80bd 	beq.w	8001962 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	f040 8095 	bne.w	800191c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b54      	ldr	r3, [pc, #336]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a53      	ldr	r2, [pc, #332]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80017f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7ff f971 	bl	8000ae4 <HAL_GetTick>
 8001802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff f96d 	bl	8000ae4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e0e3      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001818:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001824:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001828:	4b48      	ldr	r3, [pc, #288]	; (800194c <HAL_RCC_OscConfig+0x7b8>)
 800182a:	4013      	ands	r3, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	430a      	orrs	r2, r1
 8001838:	4942      	ldr	r1, [pc, #264]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800183a:	4313      	orrs	r3, r2
 800183c:	628b      	str	r3, [r1, #40]	; 0x28
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	3b01      	subs	r3, #1
 8001844:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	3b01      	subs	r3, #1
 800184e:	025b      	lsls	r3, r3, #9
 8001850:	b29b      	uxth	r3, r3
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	3b01      	subs	r3, #1
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001866:	3b01      	subs	r3, #1
 8001868:	061b      	lsls	r3, r3, #24
 800186a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800186e:	4935      	ldr	r1, [pc, #212]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001870:	4313      	orrs	r3, r2
 8001872:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001874:	4b33      	ldr	r3, [pc, #204]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	4a32      	ldr	r2, [pc, #200]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001884:	4b32      	ldr	r3, [pc, #200]	; (8001950 <HAL_RCC_OscConfig+0x7bc>)
 8001886:	4013      	ands	r3, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800188c:	00d2      	lsls	r2, r2, #3
 800188e:	492d      	ldr	r1, [pc, #180]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001890:	4313      	orrs	r3, r2
 8001892:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	f023 020c 	bic.w	r2, r3, #12
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	4928      	ldr	r1, [pc, #160]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018a6:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	f023 0202 	bic.w	r2, r3, #2
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4924      	ldr	r1, [pc, #144]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018b8:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	4a18      	ldr	r2, [pc, #96]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a15      	ldr	r2, [pc, #84]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 80018ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff f8f6 	bl	8000ae4 <HAL_GetTick>
 80018f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff f8f2 	bl	8000ae4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e068      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x768>
 800191a:	e060      	b.n	80019de <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_RCC_OscConfig+0x7b0>)
 8001922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff f8dc 	bl	8000ae4 <HAL_GetTick>
 800192c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800192e:	e011      	b.n	8001954 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff f8d8 	bl	8000ae4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d90a      	bls.n	8001954 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e04e      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
 8001942:	bf00      	nop
 8001944:	58024400 	.word	0x58024400
 8001948:	58024800 	.word	0x58024800
 800194c:	fffffc0c 	.word	0xfffffc0c
 8001950:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_RCC_OscConfig+0x854>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e7      	bne.n	8001930 <HAL_RCC_OscConfig+0x79c>
 8001960:	e03d      	b.n	80019de <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <HAL_RCC_OscConfig+0x854>)
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001968:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <HAL_RCC_OscConfig+0x854>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	2b01      	cmp	r3, #1
 8001974:	d031      	beq.n	80019da <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	f003 0203 	and.w	r2, r3, #3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d12a      	bne.n	80019da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d122      	bne.n	80019da <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d11a      	bne.n	80019da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	0a5b      	lsrs	r3, r3, #9
 80019a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d111      	bne.n	80019da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d108      	bne.n	80019da <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	0e1b      	lsrs	r3, r3, #24
 80019cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3730      	adds	r7, #48	; 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	58024400 	.word	0x58024400

080019ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e19c      	b.n	8001d3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a00:	4b8a      	ldr	r3, [pc, #552]	; (8001c2c <HAL_RCC_ClockConfig+0x240>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d910      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b87      	ldr	r3, [pc, #540]	; (8001c2c <HAL_RCC_ClockConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 020f 	bic.w	r2, r3, #15
 8001a16:	4985      	ldr	r1, [pc, #532]	; (8001c2c <HAL_RCC_ClockConfig+0x240>)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b83      	ldr	r3, [pc, #524]	; (8001c2c <HAL_RCC_ClockConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e184      	b.n	8001d3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d010      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d908      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a4c:	4b78      	ldr	r3, [pc, #480]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	4975      	ldr	r1, [pc, #468]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d010      	beq.n	8001a8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	4b70      	ldr	r3, [pc, #448]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d908      	bls.n	8001a8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	496a      	ldr	r1, [pc, #424]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d010      	beq.n	8001aba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	4b64      	ldr	r3, [pc, #400]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d908      	bls.n	8001aba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001aa8:	4b61      	ldr	r3, [pc, #388]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	495e      	ldr	r1, [pc, #376]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d010      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69da      	ldr	r2, [r3, #28]
 8001aca:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d908      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ad6:	4b56      	ldr	r3, [pc, #344]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4953      	ldr	r1, [pc, #332]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d010      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	4b4d      	ldr	r3, [pc, #308]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d908      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f023 020f 	bic.w	r2, r3, #15
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4947      	ldr	r1, [pc, #284]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d055      	beq.n	8001bce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b22:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4940      	ldr	r1, [pc, #256]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d121      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0f6      	b.n	8001d3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b54:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d115      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0ea      	b.n	8001d3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0de      	b.n	8001d3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0d6      	b.n	8001d3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	f023 0207 	bic.w	r2, r3, #7
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4925      	ldr	r1, [pc, #148]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7fe ffa1 	bl	8000ae4 <HAL_GetTick>
 8001ba2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba6:	f7fe ff9d 	bl	8000ae4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0be      	b.n	8001d3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d1eb      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d010      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d208      	bcs.n	8001bfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f023 020f 	bic.w	r2, r3, #15
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	490e      	ldr	r1, [pc, #56]	; (8001c30 <HAL_RCC_ClockConfig+0x244>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_ClockConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d214      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_RCC_ClockConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 020f 	bic.w	r2, r3, #15
 8001c12:	4906      	ldr	r1, [pc, #24]	; (8001c2c <HAL_RCC_ClockConfig+0x240>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <HAL_RCC_ClockConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e086      	b.n	8001d3a <HAL_RCC_ClockConfig+0x34e>
 8001c2c:	52002000 	.word	0x52002000
 8001c30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d010      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d208      	bcs.n	8001c62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c50:	4b3c      	ldr	r3, [pc, #240]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	4939      	ldr	r1, [pc, #228]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d010      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d208      	bcs.n	8001c90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c7e:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	492e      	ldr	r1, [pc, #184]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d010      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d208      	bcs.n	8001cbe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cac:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4922      	ldr	r1, [pc, #136]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d010      	beq.n	8001cec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d208      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4917      	ldr	r1, [pc, #92]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cec:	f000 f834 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	4912      	ldr	r1, [pc, #72]	; (8001d48 <HAL_RCC_ClockConfig+0x35c>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_RCC_ClockConfig+0x358>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <HAL_RCC_ClockConfig+0x35c>)
 8001d14:	5cd3      	ldrb	r3, [r2, r3]
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_RCC_ClockConfig+0x360>)
 8001d22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d24:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x364>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x368>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fdd4 	bl	80008dc <HAL_InitTick>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	58024400 	.word	0x58024400
 8001d48:	08006150 	.word	0x08006150
 8001d4c:	24000004 	.word	0x24000004
 8001d50:	24000000 	.word	0x24000000
 8001d54:	24000008 	.word	0x24000008

08001d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d5e:	4bb3      	ldr	r3, [pc, #716]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d66:	2b18      	cmp	r3, #24
 8001d68:	f200 8155 	bhi.w	8002016 <HAL_RCC_GetSysClockFreq+0x2be>
 8001d6c:	a201      	add	r2, pc, #4	; (adr r2, 8001d74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d72:	bf00      	nop
 8001d74:	08001dd9 	.word	0x08001dd9
 8001d78:	08002017 	.word	0x08002017
 8001d7c:	08002017 	.word	0x08002017
 8001d80:	08002017 	.word	0x08002017
 8001d84:	08002017 	.word	0x08002017
 8001d88:	08002017 	.word	0x08002017
 8001d8c:	08002017 	.word	0x08002017
 8001d90:	08002017 	.word	0x08002017
 8001d94:	08001dff 	.word	0x08001dff
 8001d98:	08002017 	.word	0x08002017
 8001d9c:	08002017 	.word	0x08002017
 8001da0:	08002017 	.word	0x08002017
 8001da4:	08002017 	.word	0x08002017
 8001da8:	08002017 	.word	0x08002017
 8001dac:	08002017 	.word	0x08002017
 8001db0:	08002017 	.word	0x08002017
 8001db4:	08001e05 	.word	0x08001e05
 8001db8:	08002017 	.word	0x08002017
 8001dbc:	08002017 	.word	0x08002017
 8001dc0:	08002017 	.word	0x08002017
 8001dc4:	08002017 	.word	0x08002017
 8001dc8:	08002017 	.word	0x08002017
 8001dcc:	08002017 	.word	0x08002017
 8001dd0:	08002017 	.word	0x08002017
 8001dd4:	08001e0b 	.word	0x08001e0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dd8:	4b94      	ldr	r3, [pc, #592]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d009      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001de4:	4b91      	ldr	r3, [pc, #580]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	4a90      	ldr	r2, [pc, #576]	; (8002030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
 8001df4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001df6:	e111      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001df8:	4b8d      	ldr	r3, [pc, #564]	; (8002030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dfa:	61bb      	str	r3, [r7, #24]
    break;
 8001dfc:	e10e      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001dfe:	4b8d      	ldr	r3, [pc, #564]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e00:	61bb      	str	r3, [r7, #24]
    break;
 8001e02:	e10b      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001e04:	4b8c      	ldr	r3, [pc, #560]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e06:	61bb      	str	r3, [r7, #24]
    break;
 8001e08:	e108      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e0a:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001e14:	4b85      	ldr	r3, [pc, #532]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e20:	4b82      	ldr	r3, [pc, #520]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e2a:	4b80      	ldr	r3, [pc, #512]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2e:	08db      	lsrs	r3, r3, #3
 8001e30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80e1 	beq.w	8002010 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	f000 8083 	beq.w	8001f5c <HAL_RCC_GetSysClockFreq+0x204>
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	f200 80a1 	bhi.w	8001fa0 <HAL_RCC_GetSysClockFreq+0x248>
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x114>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d056      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e6a:	e099      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d02d      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e78:	4b6c      	ldr	r3, [pc, #432]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	4a6b      	ldr	r2, [pc, #428]	; (8002030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
 8001e88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ea2:	4b62      	ldr	r3, [pc, #392]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800203c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ece:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001ed2:	e087      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ede:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002040 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee6:	4b51      	ldr	r3, [pc, #324]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001efa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800203c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f16:	e065      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002044 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f2a:	4b40      	ldr	r3, [pc, #256]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800203c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f5a:	e043      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800203c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f9e:	e021      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001faa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002044 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800203c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fe2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	0a5b      	lsrs	r3, r3, #9
 8001fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fee:	3301      	adds	r3, #1
 8001ff0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002008:	ee17 3a90 	vmov	r3, s15
 800200c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800200e:	e005      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
    break;
 8002014:	e002      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002018:	61bb      	str	r3, [r7, #24]
    break;
 800201a:	bf00      	nop
  }

  return sysclockfreq;
 800201c:	69bb      	ldr	r3, [r7, #24]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	58024400 	.word	0x58024400
 8002030:	03d09000 	.word	0x03d09000
 8002034:	003d0900 	.word	0x003d0900
 8002038:	017d7840 	.word	0x017d7840
 800203c:	46000000 	.word	0x46000000
 8002040:	4c742400 	.word	0x4c742400
 8002044:	4a742400 	.word	0x4a742400
 8002048:	4bbebc20 	.word	0x4bbebc20

0800204c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002052:	f7ff fe81 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8002056:	4602      	mov	r2, r0
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_RCC_GetHCLKFreq+0x50>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	490f      	ldr	r1, [pc, #60]	; (80020a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002064:	5ccb      	ldrb	r3, [r1, r3]
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_RCC_GetHCLKFreq+0x50>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002088:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	58024400 	.word	0x58024400
 80020a0:	08006150 	.word	0x08006150
 80020a4:	24000004 	.word	0x24000004
 80020a8:	24000000 	.word	0x24000000

080020ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80020b0:	f7ff ffcc 	bl	800204c <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	58024400 	.word	0x58024400
 80020d4:	08006150 	.word	0x08006150

080020d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	223f      	movs	r2, #63	; 0x3f
 80020e6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_RCC_GetClockConfig+0x7c>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f003 0207 	and.w	r2, r3, #7
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_RCC_GetClockConfig+0x7c>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_RCC_GetClockConfig+0x7c>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 020f 	and.w	r2, r3, #15
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_RCC_GetClockConfig+0x7c>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_RCC_GetClockConfig+0x7c>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_GetClockConfig+0x7c>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_GetClockConfig+0x7c>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_GetClockConfig+0x80>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 020f 	and.w	r2, r3, #15
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	601a      	str	r2, [r3, #0]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	58024400 	.word	0x58024400
 8002158:	52002000 	.word	0x52002000

0800215c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e049      	b.n	8002202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f841 	bl	800220a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3304      	adds	r3, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f000 fa00 	bl	80025a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d001      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e054      	b.n	80022e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d022      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002262:	d01d      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d018      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d013      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1f      	ldr	r2, [pc, #124]	; (80022fc <HAL_TIM_Base_Start_IT+0xdc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00e      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <HAL_TIM_Base_Start_IT+0xe0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d009      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <HAL_TIM_Base_Start_IT+0xe4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d004      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x80>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_TIM_Base_Start_IT+0xe8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d115      	bne.n	80022cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_TIM_Base_Start_IT+0xec>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d015      	beq.n	80022de <HAL_TIM_Base_Start_IT+0xbe>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d011      	beq.n	80022de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ca:	e008      	b.n	80022de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e000      	b.n	80022e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40000800 	.word	0x40000800
 80022fc:	40000c00 	.word	0x40000c00
 8002300:	40010400 	.word	0x40010400
 8002304:	40001800 	.word	0x40001800
 8002308:	40014000 	.word	0x40014000
 800230c:	00010007 	.word	0x00010007

08002310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b02      	cmp	r3, #2
 8002324:	d122      	bne.n	800236c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d11b      	bne.n	800236c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0202 	mvn.w	r2, #2
 800233c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f905 	bl	8002562 <HAL_TIM_IC_CaptureCallback>
 8002358:	e005      	b.n	8002366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8f7 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f908 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b04      	cmp	r3, #4
 8002378:	d122      	bne.n	80023c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b04      	cmp	r3, #4
 8002386:	d11b      	bne.n	80023c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0204 	mvn.w	r2, #4
 8002390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8db 	bl	8002562 <HAL_TIM_IC_CaptureCallback>
 80023ac:	e005      	b.n	80023ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f8cd 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f8de 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d122      	bne.n	8002414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d11b      	bne.n	8002414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0208 	mvn.w	r2, #8
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2204      	movs	r2, #4
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f8b1 	bl	8002562 <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f8a3 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f8b4 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b10      	cmp	r3, #16
 8002420:	d122      	bne.n	8002468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b10      	cmp	r3, #16
 800242e:	d11b      	bne.n	8002468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0210 	mvn.w	r2, #16
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2208      	movs	r2, #8
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f887 	bl	8002562 <HAL_TIM_IC_CaptureCallback>
 8002454:	e005      	b.n	8002462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f879 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f88a 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d107      	bne.n	8002494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0201 	mvn.w	r2, #1
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe f93a 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	2b80      	cmp	r3, #128	; 0x80
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ac:	2b80      	cmp	r3, #128	; 0x80
 80024ae:	d107      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f914 	bl	80026e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ce:	d10e      	bne.n	80024ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d107      	bne.n	80024ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f907 	bl	80026fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d10e      	bne.n	800251a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d107      	bne.n	800251a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f838 	bl	800258a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b20      	cmp	r3, #32
 8002526:	d10e      	bne.n	8002546 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b20      	cmp	r3, #32
 8002534:	d107      	bne.n	8002546 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0220 	mvn.w	r2, #32
 800253e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f8c7 	bl	80026d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a40      	ldr	r2, [pc, #256]	; (80026b4 <TIM_Base_SetConfig+0x114>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <TIM_Base_SetConfig+0x40>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025be:	d00f      	beq.n	80025e0 <TIM_Base_SetConfig+0x40>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a3d      	ldr	r2, [pc, #244]	; (80026b8 <TIM_Base_SetConfig+0x118>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00b      	beq.n	80025e0 <TIM_Base_SetConfig+0x40>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a3c      	ldr	r2, [pc, #240]	; (80026bc <TIM_Base_SetConfig+0x11c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d007      	beq.n	80025e0 <TIM_Base_SetConfig+0x40>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a3b      	ldr	r2, [pc, #236]	; (80026c0 <TIM_Base_SetConfig+0x120>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d003      	beq.n	80025e0 <TIM_Base_SetConfig+0x40>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a3a      	ldr	r2, [pc, #232]	; (80026c4 <TIM_Base_SetConfig+0x124>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d108      	bne.n	80025f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a2f      	ldr	r2, [pc, #188]	; (80026b4 <TIM_Base_SetConfig+0x114>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01f      	beq.n	800263a <TIM_Base_SetConfig+0x9a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002600:	d01b      	beq.n	800263a <TIM_Base_SetConfig+0x9a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a2c      	ldr	r2, [pc, #176]	; (80026b8 <TIM_Base_SetConfig+0x118>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d017      	beq.n	800263a <TIM_Base_SetConfig+0x9a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a2b      	ldr	r2, [pc, #172]	; (80026bc <TIM_Base_SetConfig+0x11c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <TIM_Base_SetConfig+0x9a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a2a      	ldr	r2, [pc, #168]	; (80026c0 <TIM_Base_SetConfig+0x120>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00f      	beq.n	800263a <TIM_Base_SetConfig+0x9a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <TIM_Base_SetConfig+0x124>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00b      	beq.n	800263a <TIM_Base_SetConfig+0x9a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a28      	ldr	r2, [pc, #160]	; (80026c8 <TIM_Base_SetConfig+0x128>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <TIM_Base_SetConfig+0x9a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a27      	ldr	r2, [pc, #156]	; (80026cc <TIM_Base_SetConfig+0x12c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d003      	beq.n	800263a <TIM_Base_SetConfig+0x9a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a26      	ldr	r2, [pc, #152]	; (80026d0 <TIM_Base_SetConfig+0x130>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d108      	bne.n	800264c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <TIM_Base_SetConfig+0x114>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00f      	beq.n	8002698 <TIM_Base_SetConfig+0xf8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <TIM_Base_SetConfig+0x124>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d00b      	beq.n	8002698 <TIM_Base_SetConfig+0xf8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <TIM_Base_SetConfig+0x128>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d007      	beq.n	8002698 <TIM_Base_SetConfig+0xf8>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <TIM_Base_SetConfig+0x12c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d003      	beq.n	8002698 <TIM_Base_SetConfig+0xf8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <TIM_Base_SetConfig+0x130>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d103      	bne.n	80026a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	615a      	str	r2, [r3, #20]
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40010000 	.word	0x40010000
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40000800 	.word	0x40000800
 80026c0:	40000c00 	.word	0x40000c00
 80026c4:	40010400 	.word	0x40010400
 80026c8:	40014000 	.word	0x40014000
 80026cc:	40014400 	.word	0x40014400
 80026d0:	40014800 	.word	0x40014800

080026d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <__NVIC_SetPriority>:
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800271c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002720:	2b00      	cmp	r3, #0
 8002722:	db0a      	blt.n	800273a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	490c      	ldr	r1, [pc, #48]	; (800275c <__NVIC_SetPriority+0x4c>)
 800272a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272e:	0112      	lsls	r2, r2, #4
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	440b      	add	r3, r1
 8002734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002738:	e00a      	b.n	8002750 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4908      	ldr	r1, [pc, #32]	; (8002760 <__NVIC_SetPriority+0x50>)
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3b04      	subs	r3, #4
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	440b      	add	r3, r1
 800274e:	761a      	strb	r2, [r3, #24]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <SysTick_Handler+0x1c>)
 800276a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800276c:	f002 f960 	bl	8004a30 <xTaskGetSchedulerState>
 8002770:	4603      	mov	r3, r0
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002776:	f000 fd97 	bl	80032a8 <xPortSysTickHandler>
  }
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	e000e010 	.word	0xe000e010

08002784 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002788:	2100      	movs	r1, #0
 800278a:	f06f 0004 	mvn.w	r0, #4
 800278e:	f7ff ffbf 	bl	8002710 <__NVIC_SetPriority>
#endif
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800279e:	f3ef 8305 	mrs	r3, IPSR
 80027a2:	603b      	str	r3, [r7, #0]
  return(result);
 80027a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80027aa:	f06f 0305 	mvn.w	r3, #5
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	e00c      	b.n	80027cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <osKernelInitialize+0x44>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d105      	bne.n	80027c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <osKernelInitialize+0x44>)
 80027bc:	2201      	movs	r2, #1
 80027be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	e002      	b.n	80027cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027cc:	687b      	ldr	r3, [r7, #4]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	2400015c 	.word	0x2400015c

080027e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027e6:	f3ef 8305 	mrs	r3, IPSR
 80027ea:	603b      	str	r3, [r7, #0]
  return(result);
 80027ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80027f2:	f06f 0305 	mvn.w	r3, #5
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	e010      	b.n	800281c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <osKernelStart+0x48>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d109      	bne.n	8002816 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002802:	f7ff ffbf 	bl	8002784 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <osKernelStart+0x48>)
 8002808:	2202      	movs	r2, #2
 800280a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800280c:	f001 fcb4 	bl	8004178 <vTaskStartScheduler>
      stat = osOK;
 8002810:	2300      	movs	r3, #0
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	e002      	b.n	800281c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800281a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800281c:	687b      	ldr	r3, [r7, #4]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	2400015c 	.word	0x2400015c

0800282c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b08e      	sub	sp, #56	; 0x38
 8002830:	af04      	add	r7, sp, #16
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800283c:	f3ef 8305 	mrs	r3, IPSR
 8002840:	617b      	str	r3, [r7, #20]
  return(result);
 8002842:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002844:	2b00      	cmp	r3, #0
 8002846:	d17e      	bne.n	8002946 <osThreadNew+0x11a>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d07b      	beq.n	8002946 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002852:	2318      	movs	r3, #24
 8002854:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800285e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d045      	beq.n	80028f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <osThreadNew+0x48>
        name = attr->name;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <osThreadNew+0x6e>
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	2b38      	cmp	r3, #56	; 0x38
 800288c:	d805      	bhi.n	800289a <osThreadNew+0x6e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <osThreadNew+0x72>
        return (NULL);
 800289a:	2300      	movs	r3, #0
 800289c:	e054      	b.n	8002948 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00e      	beq.n	80028d4 <osThreadNew+0xa8>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2bbb      	cmp	r3, #187	; 0xbb
 80028bc:	d90a      	bls.n	80028d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d006      	beq.n	80028d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <osThreadNew+0xa8>
        mem = 1;
 80028ce:	2301      	movs	r3, #1
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	e010      	b.n	80028f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10c      	bne.n	80028f6 <osThreadNew+0xca>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d108      	bne.n	80028f6 <osThreadNew+0xca>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <osThreadNew+0xca>
          mem = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
 80028f0:	e001      	b.n	80028f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d110      	bne.n	800291e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002904:	9202      	str	r2, [sp, #8]
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6a3a      	ldr	r2, [r7, #32]
 8002910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f001 fa44 	bl	8003da0 <xTaskCreateStatic>
 8002918:	4603      	mov	r3, r0
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	e013      	b.n	8002946 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d110      	bne.n	8002946 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	b29a      	uxth	r2, r3
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f001 fa8f 	bl	8003e5a <xTaskCreate>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d001      	beq.n	8002946 <osThreadNew+0x11a>
            hTask = NULL;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002946:	693b      	ldr	r3, [r7, #16]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3728      	adds	r7, #40	; 0x28
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002958:	f3ef 8305 	mrs	r3, IPSR
 800295c:	60bb      	str	r3, [r7, #8]
  return(result);
 800295e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <osDelay+0x1c>
    stat = osErrorISR;
 8002964:	f06f 0305 	mvn.w	r3, #5
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e007      	b.n	800297c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f001 fbca 	bl	8004110 <vTaskDelay>
    }
  }

  return (stat);
 800297c:	68fb      	ldr	r3, [r7, #12]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002998:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4a06      	ldr	r2, [pc, #24]	; (80029b8 <vApplicationGetIdleTaskMemory+0x30>)
 800299e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	24000160 	.word	0x24000160
 80029b8:	2400021c 	.word	0x2400021c

080029bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80029cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <vApplicationGetTimerTaskMemory+0x30>)
 80029d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029da:	601a      	str	r2, [r3, #0]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	2400041c 	.word	0x2400041c
 80029ec:	240004d8 	.word	0x240004d8

080029f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80029fc:	f001 fc2c 	bl	8004258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002a00:	4b5b      	ldr	r3, [pc, #364]	; (8002b70 <pvPortMalloc+0x180>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002a08:	f000 f920 	bl	8002c4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <pvPortMalloc+0x184>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f040 8093 	bne.w	8002b40 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01d      	beq.n	8002a5c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002a20:	2208      	movs	r2, #8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d014      	beq.n	8002a5c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f023 0307 	bic.w	r3, r3, #7
 8002a38:	3308      	adds	r3, #8
 8002a3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a58:	bf00      	nop
 8002a5a:	e7fe      	b.n	8002a5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d06e      	beq.n	8002b40 <pvPortMalloc+0x150>
 8002a62:	4b45      	ldr	r3, [pc, #276]	; (8002b78 <pvPortMalloc+0x188>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d869      	bhi.n	8002b40 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002a6c:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <pvPortMalloc+0x18c>)
 8002a6e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002a70:	4b42      	ldr	r3, [pc, #264]	; (8002b7c <pvPortMalloc+0x18c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a76:	e004      	b.n	8002a82 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d903      	bls.n	8002a94 <pvPortMalloc+0xa4>
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f1      	bne.n	8002a78 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a94:	4b36      	ldr	r3, [pc, #216]	; (8002b70 <pvPortMalloc+0x180>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d050      	beq.n	8002b40 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	4413      	add	r3, r2
 8002aa6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	1ad2      	subs	r2, r2, r3
 8002ab8:	2308      	movs	r3, #8
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d91f      	bls.n	8002b00 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <pvPortMalloc+0xf8>
	__asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	613b      	str	r3, [r7, #16]
}
 8002ae4:	bf00      	nop
 8002ae6:	e7fe      	b.n	8002ae6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	1ad2      	subs	r2, r2, r3
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002afa:	69b8      	ldr	r0, [r7, #24]
 8002afc:	f000 f908 	bl	8002d10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <pvPortMalloc+0x188>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <pvPortMalloc+0x188>)
 8002b0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <pvPortMalloc+0x188>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <pvPortMalloc+0x190>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d203      	bcs.n	8002b22 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <pvPortMalloc+0x188>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <pvPortMalloc+0x190>)
 8002b20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <pvPortMalloc+0x184>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <pvPortMalloc+0x194>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <pvPortMalloc+0x194>)
 8002b3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002b40:	f001 fb98 	bl	8004274 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <pvPortMalloc+0x174>
	__asm volatile
 8002b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	60fb      	str	r3, [r7, #12]
}
 8002b60:	bf00      	nop
 8002b62:	e7fe      	b.n	8002b62 <pvPortMalloc+0x172>
	return pvReturn;
 8002b64:	69fb      	ldr	r3, [r7, #28]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3728      	adds	r7, #40	; 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	240044e0 	.word	0x240044e0
 8002b74:	240044f4 	.word	0x240044f4
 8002b78:	240044e4 	.word	0x240044e4
 8002b7c:	240044d8 	.word	0x240044d8
 8002b80:	240044e8 	.word	0x240044e8
 8002b84:	240044ec 	.word	0x240044ec

08002b88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d04d      	beq.n	8002c36 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	425b      	negs	r3, r3
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <vPortFree+0xb8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <vPortFree+0x44>
	__asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	60fb      	str	r3, [r7, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	e7fe      	b.n	8002bca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <vPortFree+0x62>
	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	60bb      	str	r3, [r7, #8]
}
 8002be6:	bf00      	nop
 8002be8:	e7fe      	b.n	8002be8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <vPortFree+0xb8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01e      	beq.n	8002c36 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d11a      	bne.n	8002c36 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <vPortFree+0xb8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002c10:	f001 fb22 	bl	8004258 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <vPortFree+0xbc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <vPortFree+0xbc>)
 8002c20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c22:	6938      	ldr	r0, [r7, #16]
 8002c24:	f000 f874 	bl	8002d10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <vPortFree+0xc0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	4a06      	ldr	r2, [pc, #24]	; (8002c48 <vPortFree+0xc0>)
 8002c30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002c32:	f001 fb1f 	bl	8004274 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	240044f4 	.word	0x240044f4
 8002c44:	240044e4 	.word	0x240044e4
 8002c48:	240044f0 	.word	0x240044f0

08002c4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c52:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002c56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <prvHeapInit+0xac>)
 8002c5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00c      	beq.n	8002c80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3307      	adds	r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0307 	bic.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <prvHeapInit+0xac>)
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c84:	4a1d      	ldr	r2, [pc, #116]	; (8002cfc <prvHeapInit+0xb0>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <prvHeapInit+0xb0>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	4413      	add	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002c98:	2208      	movs	r2, #8
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0307 	bic.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <prvHeapInit+0xb4>)
 8002cac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <prvHeapInit+0xb4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <prvHeapInit+0xb4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	1ad2      	subs	r2, r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <prvHeapInit+0xb4>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <prvHeapInit+0xb8>)
 8002cda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <prvHeapInit+0xbc>)
 8002ce2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <prvHeapInit+0xc0>)
 8002ce6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002cea:	601a      	str	r2, [r3, #0]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	240008d8 	.word	0x240008d8
 8002cfc:	240044d8 	.word	0x240044d8
 8002d00:	240044e0 	.word	0x240044e0
 8002d04:	240044e8 	.word	0x240044e8
 8002d08:	240044e4 	.word	0x240044e4
 8002d0c:	240044f4 	.word	0x240044f4

08002d10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <prvInsertBlockIntoFreeList+0xac>)
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e002      	b.n	8002d24 <prvInsertBlockIntoFreeList+0x14>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d8f7      	bhi.n	8002d1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	4413      	add	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d108      	bne.n	8002d52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	441a      	add	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	441a      	add	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d118      	bne.n	8002d98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d00d      	beq.n	8002d8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	441a      	add	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e008      	b.n	8002da0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e003      	b.n	8002da0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d002      	beq.n	8002dae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	240044d8 	.word	0x240044d8
 8002dc0:	240044e0 	.word	0x240044e0

08002dc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f103 0208 	add.w	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ddc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f103 0208 	add.w	r2, r3, #8
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f103 0208 	add.w	r2, r3, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	601a      	str	r2, [r3, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e66:	b480      	push	{r7}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e7c:	d103      	bne.n	8002e86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e00c      	b.n	8002ea0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3308      	adds	r3, #8
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e002      	b.n	8002e94 <vListInsert+0x2e>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d2f6      	bcs.n	8002e8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	601a      	str	r2, [r3, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6892      	ldr	r2, [r2, #8]
 8002eee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6852      	ldr	r2, [r2, #4]
 8002ef8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d103      	bne.n	8002f0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1e5a      	subs	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3b04      	subs	r3, #4
 8002f3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3b04      	subs	r3, #4
 8002f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f023 0201 	bic.w	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3b04      	subs	r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002f5c:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <pxPortInitialiseStack+0x64>)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3b14      	subs	r3, #20
 8002f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3b04      	subs	r3, #4
 8002f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f06f 0202 	mvn.w	r2, #2
 8002f7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	3b20      	subs	r3, #32
 8002f80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002f82:	68fb      	ldr	r3, [r7, #12]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	08002f95 	.word	0x08002f95

08002f94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <prvTaskExitError+0x54>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa6:	d00a      	beq.n	8002fbe <prvTaskExitError+0x2a>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	60fb      	str	r3, [r7, #12]
}
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <prvTaskExitError+0x28>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	60bb      	str	r3, [r7, #8]
}
 8002fd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002fd2:	bf00      	nop
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0fc      	beq.n	8002fd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	24000010 	.word	0x24000010
 8002fec:	00000000 	.word	0x00000000

08002ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <pxCurrentTCBConst2>)
 8002ff2:	6819      	ldr	r1, [r3, #0]
 8002ff4:	6808      	ldr	r0, [r1, #0]
 8002ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ffa:	f380 8809 	msr	PSP, r0
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f04f 0000 	mov.w	r0, #0
 8003006:	f380 8811 	msr	BASEPRI, r0
 800300a:	4770      	bx	lr
 800300c:	f3af 8000 	nop.w

08003010 <pxCurrentTCBConst2>:
 8003010:	24004500 	.word	0x24004500
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop

08003018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003018:	4808      	ldr	r0, [pc, #32]	; (800303c <prvPortStartFirstTask+0x24>)
 800301a:	6800      	ldr	r0, [r0, #0]
 800301c:	6800      	ldr	r0, [r0, #0]
 800301e:	f380 8808 	msr	MSP, r0
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f380 8814 	msr	CONTROL, r0
 800302a:	b662      	cpsie	i
 800302c:	b661      	cpsie	f
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	df00      	svc	0
 8003038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800303a:	bf00      	nop
 800303c:	e000ed08 	.word	0xe000ed08

08003040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003046:	4b46      	ldr	r3, [pc, #280]	; (8003160 <xPortStartScheduler+0x120>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a46      	ldr	r2, [pc, #280]	; (8003164 <xPortStartScheduler+0x124>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d10a      	bne.n	8003066 <xPortStartScheduler+0x26>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	613b      	str	r3, [r7, #16]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003066:	4b3e      	ldr	r3, [pc, #248]	; (8003160 <xPortStartScheduler+0x120>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a3f      	ldr	r2, [pc, #252]	; (8003168 <xPortStartScheduler+0x128>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d10a      	bne.n	8003086 <xPortStartScheduler+0x46>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	60fb      	str	r3, [r7, #12]
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <xPortStartScheduler+0x12c>)
 8003088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	22ff      	movs	r2, #255	; 0xff
 8003096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4b31      	ldr	r3, [pc, #196]	; (8003170 <xPortStartScheduler+0x130>)
 80030ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <xPortStartScheduler+0x134>)
 80030b0:	2207      	movs	r2, #7
 80030b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030b4:	e009      	b.n	80030ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80030b6:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <xPortStartScheduler+0x134>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	4a2d      	ldr	r2, [pc, #180]	; (8003174 <xPortStartScheduler+0x134>)
 80030be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b80      	cmp	r3, #128	; 0x80
 80030d4:	d0ef      	beq.n	80030b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <xPortStartScheduler+0x134>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f1c3 0307 	rsb	r3, r3, #7
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d00a      	beq.n	80030f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	60bb      	str	r3, [r7, #8]
}
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030f8:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <xPortStartScheduler+0x134>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <xPortStartScheduler+0x134>)
 8003100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <xPortStartScheduler+0x134>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800310a:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <xPortStartScheduler+0x134>)
 800310c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003116:	4b18      	ldr	r3, [pc, #96]	; (8003178 <xPortStartScheduler+0x138>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a17      	ldr	r2, [pc, #92]	; (8003178 <xPortStartScheduler+0x138>)
 800311c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <xPortStartScheduler+0x138>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a14      	ldr	r2, [pc, #80]	; (8003178 <xPortStartScheduler+0x138>)
 8003128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800312c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800312e:	f000 f8dd 	bl	80032ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <xPortStartScheduler+0x13c>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003138:	f000 f8fc 	bl	8003334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800313c:	4b10      	ldr	r3, [pc, #64]	; (8003180 <xPortStartScheduler+0x140>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0f      	ldr	r2, [pc, #60]	; (8003180 <xPortStartScheduler+0x140>)
 8003142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003148:	f7ff ff66 	bl	8003018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800314c:	f001 f9fa 	bl	8004544 <vTaskSwitchContext>
	prvTaskExitError();
 8003150:	f7ff ff20 	bl	8002f94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	e000ed00 	.word	0xe000ed00
 8003164:	410fc271 	.word	0x410fc271
 8003168:	410fc270 	.word	0x410fc270
 800316c:	e000e400 	.word	0xe000e400
 8003170:	240044f8 	.word	0x240044f8
 8003174:	240044fc 	.word	0x240044fc
 8003178:	e000ed20 	.word	0xe000ed20
 800317c:	24000010 	.word	0x24000010
 8003180:	e000ef34 	.word	0xe000ef34

08003184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
	__asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	607b      	str	r3, [r7, #4]
}
 800319c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <vPortEnterCritical+0x58>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3301      	adds	r3, #1
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <vPortEnterCritical+0x58>)
 80031a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <vPortEnterCritical+0x58>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d10f      	bne.n	80031d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <vPortEnterCritical+0x5c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	603b      	str	r3, [r7, #0]
}
 80031cc:	bf00      	nop
 80031ce:	e7fe      	b.n	80031ce <vPortEnterCritical+0x4a>
	}
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	24000010 	.word	0x24000010
 80031e0:	e000ed04 	.word	0xe000ed04

080031e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <vPortExitCritical+0x50>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <vPortExitCritical+0x24>
	__asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	607b      	str	r3, [r7, #4]
}
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <vPortExitCritical+0x50>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3b01      	subs	r3, #1
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <vPortExitCritical+0x50>)
 8003210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <vPortExitCritical+0x50>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <vPortExitCritical+0x42>
 800321a:	2300      	movs	r3, #0
 800321c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	24000010 	.word	0x24000010
	...

08003240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003240:	f3ef 8009 	mrs	r0, PSP
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <pxCurrentTCBConst>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	f01e 0f10 	tst.w	lr, #16
 8003250:	bf08      	it	eq
 8003252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325a:	6010      	str	r0, [r2, #0]
 800325c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003264:	f380 8811 	msr	BASEPRI, r0
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f001 f968 	bl	8004544 <vTaskSwitchContext>
 8003274:	f04f 0000 	mov.w	r0, #0
 8003278:	f380 8811 	msr	BASEPRI, r0
 800327c:	bc09      	pop	{r0, r3}
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	6808      	ldr	r0, [r1, #0]
 8003282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003286:	f01e 0f10 	tst.w	lr, #16
 800328a:	bf08      	it	eq
 800328c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003290:	f380 8809 	msr	PSP, r0
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	f3af 8000 	nop.w

080032a0 <pxCurrentTCBConst>:
 80032a0:	24004500 	.word	0x24004500
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop

080032a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	607b      	str	r3, [r7, #4]
}
 80032c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80032c2:	f001 f885 	bl	80043d0 <xTaskIncrementTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <xPortSysTickHandler+0x40>)
 80032ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	2300      	movs	r3, #0
 80032d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	f383 8811 	msr	BASEPRI, r3
}
 80032de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	e000ed04 	.word	0xe000ed04

080032ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <vPortSetupTimerInterrupt+0x34>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <vPortSetupTimerInterrupt+0x38>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <vPortSetupTimerInterrupt+0x3c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <vPortSetupTimerInterrupt+0x40>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	099b      	lsrs	r3, r3, #6
 8003308:	4a09      	ldr	r2, [pc, #36]	; (8003330 <vPortSetupTimerInterrupt+0x44>)
 800330a:	3b01      	subs	r3, #1
 800330c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <vPortSetupTimerInterrupt+0x34>)
 8003310:	2207      	movs	r2, #7
 8003312:	601a      	str	r2, [r3, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000e010 	.word	0xe000e010
 8003324:	e000e018 	.word	0xe000e018
 8003328:	24000000 	.word	0x24000000
 800332c:	10624dd3 	.word	0x10624dd3
 8003330:	e000e014 	.word	0xe000e014

08003334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003344 <vPortEnableVFP+0x10>
 8003338:	6801      	ldr	r1, [r0, #0]
 800333a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800333e:	6001      	str	r1, [r0, #0]
 8003340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003342:	bf00      	nop
 8003344:	e000ed88 	.word	0xe000ed88

08003348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800334e:	f3ef 8305 	mrs	r3, IPSR
 8003352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b0f      	cmp	r3, #15
 8003358:	d914      	bls.n	8003384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800335a:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <vPortValidateInterruptPriority+0x70>)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003364:	4b15      	ldr	r3, [pc, #84]	; (80033bc <vPortValidateInterruptPriority+0x74>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	7afa      	ldrb	r2, [r7, #11]
 800336a:	429a      	cmp	r2, r3
 800336c:	d20a      	bcs.n	8003384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	607b      	str	r3, [r7, #4]
}
 8003380:	bf00      	nop
 8003382:	e7fe      	b.n	8003382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <vPortValidateInterruptPriority+0x78>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800338c:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <vPortValidateInterruptPriority+0x7c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d90a      	bls.n	80033aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	603b      	str	r3, [r7, #0]
}
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <vPortValidateInterruptPriority+0x60>
	}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	e000e3f0 	.word	0xe000e3f0
 80033bc:	240044f8 	.word	0x240044f8
 80033c0:	e000ed0c 	.word	0xe000ed0c
 80033c4:	240044fc 	.word	0x240044fc

080033c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <xQueueGenericReset+0x2a>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	60bb      	str	r3, [r7, #8]
}
 80033ee:	bf00      	nop
 80033f0:	e7fe      	b.n	80033f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033f2:	f7ff fec7 	bl	8003184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	68f9      	ldr	r1, [r7, #12]
 8003400:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	441a      	add	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003422:	3b01      	subs	r3, #1
 8003424:	68f9      	ldr	r1, [r7, #12]
 8003426:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	441a      	add	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	22ff      	movs	r2, #255	; 0xff
 8003436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	22ff      	movs	r2, #255	; 0xff
 800343e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d114      	bne.n	8003472 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01a      	beq.n	8003486 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3310      	adds	r3, #16
 8003454:	4618      	mov	r0, r3
 8003456:	f001 f929 	bl	80046ac <xTaskRemoveFromEventList>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d012      	beq.n	8003486 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <xQueueGenericReset+0xcc>)
 8003462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	e009      	b.n	8003486 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3310      	adds	r3, #16
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fca4 	bl	8002dc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3324      	adds	r3, #36	; 0x24
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fc9f 	bl	8002dc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003486:	f7ff fead 	bl	80031e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800348a:	2301      	movs	r3, #1
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	e000ed04 	.word	0xe000ed04

08003498 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08e      	sub	sp, #56	; 0x38
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <xQueueGenericCreateStatic+0x52>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <xQueueGenericCreateStatic+0x56>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <xQueueGenericCreateStatic+0x58>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	623b      	str	r3, [r7, #32]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <xQueueGenericCreateStatic+0x7e>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <xQueueGenericCreateStatic+0x82>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <xQueueGenericCreateStatic+0x84>
 800351a:	2300      	movs	r3, #0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	61fb      	str	r3, [r7, #28]
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003536:	2350      	movs	r3, #80	; 0x50
 8003538:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b50      	cmp	r3, #80	; 0x50
 800353e:	d00a      	beq.n	8003556 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	61bb      	str	r3, [r7, #24]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003556:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800356a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f805 	bl	8003588 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003580:	4618      	mov	r0, r3
 8003582:	3730      	adds	r7, #48	; 0x30
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d103      	bne.n	80035a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e002      	b.n	80035aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035b6:	2101      	movs	r1, #1
 80035b8:	69b8      	ldr	r0, [r7, #24]
 80035ba:	f7ff ff05 	bl	80033c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08e      	sub	sp, #56	; 0x38
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035de:	2300      	movs	r3, #0
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xQueueGenericSend+0x32>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d103      	bne.n	8003610 <xQueueGenericSend+0x40>
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <xQueueGenericSend+0x44>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <xQueueGenericSend+0x46>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <xQueueGenericSend+0x60>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800362c:	bf00      	nop
 800362e:	e7fe      	b.n	800362e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d103      	bne.n	800363e <xQueueGenericSend+0x6e>
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <xQueueGenericSend+0x72>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <xQueueGenericSend+0x74>
 8003642:	2300      	movs	r3, #0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <xQueueGenericSend+0x8e>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	623b      	str	r3, [r7, #32]
}
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800365e:	f001 f9e7 	bl	8004a30 <xTaskGetSchedulerState>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <xQueueGenericSend+0x9e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <xQueueGenericSend+0xa2>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <xQueueGenericSend+0xa4>
 8003672:	2300      	movs	r3, #0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <xQueueGenericSend+0xbe>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	61fb      	str	r3, [r7, #28]
}
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800368e:	f7ff fd79 	bl	8003184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <xQueueGenericSend+0xd4>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d129      	bne.n	80036f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036aa:	f000 fa0b 	bl	8003ac4 <prvCopyDataToQueue>
 80036ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	3324      	adds	r3, #36	; 0x24
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fff5 	bl	80046ac <xTaskRemoveFromEventList>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d013      	beq.n	80036f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036c8:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <xQueueGenericSend+0x1f8>)
 80036ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	e00a      	b.n	80036f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <xQueueGenericSend+0x1f8>)
 80036e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036f0:	f7ff fd78 	bl	80031e4 <vPortExitCritical>
				return pdPASS;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e063      	b.n	80037c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036fe:	f7ff fd71 	bl	80031e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003702:	2300      	movs	r3, #0
 8003704:	e05c      	b.n	80037c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800370c:	f107 0314 	add.w	r3, r7, #20
 8003710:	4618      	mov	r0, r3
 8003712:	f001 f82f 	bl	8004774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003716:	2301      	movs	r3, #1
 8003718:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800371a:	f7ff fd63 	bl	80031e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800371e:	f000 fd9b 	bl	8004258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003722:	f7ff fd2f 	bl	8003184 <vPortEnterCritical>
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800372c:	b25b      	sxtb	r3, r3
 800372e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003732:	d103      	bne.n	800373c <xQueueGenericSend+0x16c>
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003742:	b25b      	sxtb	r3, r3
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003748:	d103      	bne.n	8003752 <xQueueGenericSend+0x182>
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003752:	f7ff fd47 	bl	80031e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003756:	1d3a      	adds	r2, r7, #4
 8003758:	f107 0314 	add.w	r3, r7, #20
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f001 f81e 	bl	80047a0 <xTaskCheckForTimeOut>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d124      	bne.n	80037b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800376a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800376c:	f000 faa2 	bl	8003cb4 <prvIsQueueFull>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d018      	beq.n	80037a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	3310      	adds	r3, #16
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f000 ff44 	bl	800460c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003786:	f000 fa2d 	bl	8003be4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800378a:	f000 fd73 	bl	8004274 <xTaskResumeAll>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	f47f af7c 	bne.w	800368e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <xQueueGenericSend+0x1f8>)
 8003798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	e772      	b.n	800368e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037aa:	f000 fa1b 	bl	8003be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037ae:	f000 fd61 	bl	8004274 <xTaskResumeAll>
 80037b2:	e76c      	b.n	800368e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037b6:	f000 fa15 	bl	8003be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037ba:	f000 fd5b 	bl	8004274 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3738      	adds	r7, #56	; 0x38
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b090      	sub	sp, #64	; 0x40
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d103      	bne.n	8003808 <xQueueGenericSendFromISR+0x3c>
 8003800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <xQueueGenericSendFromISR+0x40>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <xQueueGenericSendFromISR+0x42>
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10a      	bne.n	8003828 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d103      	bne.n	8003836 <xQueueGenericSendFromISR+0x6a>
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <xQueueGenericSendFromISR+0x6e>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <xQueueGenericSendFromISR+0x70>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	623b      	str	r3, [r7, #32]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003856:	f7ff fd77 	bl	8003348 <vPortValidateInterruptPriority>
	__asm volatile
 800385a:	f3ef 8211 	mrs	r2, BASEPRI
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	61fa      	str	r2, [r7, #28]
 8003870:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003872:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <xQueueGenericSendFromISR+0xbc>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d12f      	bne.n	80038e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800388e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800389e:	f000 f911 	bl	8003ac4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038aa:	d112      	bne.n	80038d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d016      	beq.n	80038e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	3324      	adds	r3, #36	; 0x24
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fef7 	bl	80046ac <xTaskRemoveFromEventList>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00e      	beq.n	80038e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e007      	b.n	80038e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038d6:	3301      	adds	r3, #1
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	b25a      	sxtb	r2, r3
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038e2:	2301      	movs	r3, #1
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80038e6:	e001      	b.n	80038ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ee:	617b      	str	r3, [r7, #20]
	__asm volatile
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f383 8811 	msr	BASEPRI, r3
}
 80038f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3740      	adds	r7, #64	; 0x40
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	; 0x30
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003910:	2300      	movs	r3, #0
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <xQueueReceive+0x30>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	623b      	str	r3, [r7, #32]
}
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <xQueueReceive+0x3e>
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <xQueueReceive+0x42>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <xQueueReceive+0x44>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <xQueueReceive+0x5e>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	61fb      	str	r3, [r7, #28]
}
 800395e:	bf00      	nop
 8003960:	e7fe      	b.n	8003960 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003962:	f001 f865 	bl	8004a30 <xTaskGetSchedulerState>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <xQueueReceive+0x6e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <xQueueReceive+0x72>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <xQueueReceive+0x74>
 8003976:	2300      	movs	r3, #0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <xQueueReceive+0x8e>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	61bb      	str	r3, [r7, #24]
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003992:	f7ff fbf7 	bl	8003184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01f      	beq.n	80039e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039a6:	f000 f8f7 	bl	8003b98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00f      	beq.n	80039da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	3310      	adds	r3, #16
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fe74 	bl	80046ac <xTaskRemoveFromEventList>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039ca:	4b3d      	ldr	r3, [pc, #244]	; (8003ac0 <xQueueReceive+0x1bc>)
 80039cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039da:	f7ff fc03 	bl	80031e4 <vPortExitCritical>
				return pdPASS;
 80039de:	2301      	movs	r3, #1
 80039e0:	e069      	b.n	8003ab6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039e8:	f7ff fbfc 	bl	80031e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e062      	b.n	8003ab6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039f6:	f107 0310 	add.w	r3, r7, #16
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 feba 	bl	8004774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a04:	f7ff fbee 	bl	80031e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a08:	f000 fc26 	bl	8004258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a0c:	f7ff fbba 	bl	8003184 <vPortEnterCritical>
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a16:	b25b      	sxtb	r3, r3
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a1c:	d103      	bne.n	8003a26 <xQueueReceive+0x122>
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a32:	d103      	bne.n	8003a3c <xQueueReceive+0x138>
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a3c:	f7ff fbd2 	bl	80031e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a40:	1d3a      	adds	r2, r7, #4
 8003a42:	f107 0310 	add.w	r3, r7, #16
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fea9 	bl	80047a0 <xTaskCheckForTimeOut>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d123      	bne.n	8003a9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a56:	f000 f917 	bl	8003c88 <prvIsQueueEmpty>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d017      	beq.n	8003a90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	3324      	adds	r3, #36	; 0x24
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fdcf 	bl	800460c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a70:	f000 f8b8 	bl	8003be4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a74:	f000 fbfe 	bl	8004274 <xTaskResumeAll>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d189      	bne.n	8003992 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <xQueueReceive+0x1bc>)
 8003a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	e780      	b.n	8003992 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a92:	f000 f8a7 	bl	8003be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a96:	f000 fbed 	bl	8004274 <xTaskResumeAll>
 8003a9a:	e77a      	b.n	8003992 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a9e:	f000 f8a1 	bl	8003be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aa2:	f000 fbe7 	bl	8004274 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aa8:	f000 f8ee 	bl	8003c88 <prvIsQueueEmpty>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f43f af6f 	beq.w	8003992 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ab4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3730      	adds	r7, #48	; 0x30
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	e000ed04 	.word	0xe000ed04

08003ac4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10d      	bne.n	8003afe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d14d      	bne.n	8003b86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 ffbc 	bl	8004a6c <xTaskPriorityDisinherit>
 8003af4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e043      	b.n	8003b86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d119      	bne.n	8003b38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6858      	ldr	r0, [r3, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	f002 fa24 	bl	8005f5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	441a      	add	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d32b      	bcc.n	8003b86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	e026      	b.n	8003b86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68d8      	ldr	r0, [r3, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	461a      	mov	r2, r3
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	f002 fa0a 	bl	8005f5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	425b      	negs	r3, r3
 8003b52:	441a      	add	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d207      	bcs.n	8003b74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	425b      	negs	r3, r3
 8003b6e:	441a      	add	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d105      	bne.n	8003b86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b8e:	697b      	ldr	r3, [r7, #20]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d018      	beq.n	8003bdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	441a      	add	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d303      	bcc.n	8003bcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68d9      	ldr	r1, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6838      	ldr	r0, [r7, #0]
 8003bd8:	f002 f9c0 	bl	8005f5c <memcpy>
	}
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003bec:	f7ff faca 	bl	8003184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bf8:	e011      	b.n	8003c1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d012      	beq.n	8003c28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3324      	adds	r3, #36	; 0x24
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fd50 	bl	80046ac <xTaskRemoveFromEventList>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c12:	f000 fe27 	bl	8004864 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	dce9      	bgt.n	8003bfa <prvUnlockQueue+0x16>
 8003c26:	e000      	b.n	8003c2a <prvUnlockQueue+0x46>
					break;
 8003c28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	22ff      	movs	r2, #255	; 0xff
 8003c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c32:	f7ff fad7 	bl	80031e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c36:	f7ff faa5 	bl	8003184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c42:	e011      	b.n	8003c68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d012      	beq.n	8003c72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3310      	adds	r3, #16
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fd2b 	bl	80046ac <xTaskRemoveFromEventList>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c5c:	f000 fe02 	bl	8004864 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c60:	7bbb      	ldrb	r3, [r7, #14]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	dce9      	bgt.n	8003c44 <prvUnlockQueue+0x60>
 8003c70:	e000      	b.n	8003c74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	22ff      	movs	r2, #255	; 0xff
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c7c:	f7ff fab2 	bl	80031e4 <vPortExitCritical>
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c90:	f7ff fa78 	bl	8003184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e001      	b.n	8003ca6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ca6:	f7ff fa9d 	bl	80031e4 <vPortExitCritical>

	return xReturn;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cbc:	f7ff fa62 	bl	8003184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d102      	bne.n	8003cd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e001      	b.n	8003cd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cd6:	f7ff fa85 	bl	80031e4 <vPortExitCritical>

	return xReturn;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e014      	b.n	8003d1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cf4:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <vQueueAddToRegistry+0x50>)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d00:	490c      	ldr	r1, [pc, #48]	; (8003d34 <vQueueAddToRegistry+0x50>)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d0a:	4a0a      	ldr	r2, [pc, #40]	; (8003d34 <vQueueAddToRegistry+0x50>)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d16:	e006      	b.n	8003d26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b07      	cmp	r3, #7
 8003d22:	d9e7      	bls.n	8003cf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	24004c34 	.word	0x24004c34

08003d38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d48:	f7ff fa1c 	bl	8003184 <vPortEnterCritical>
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d52:	b25b      	sxtb	r3, r3
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d58:	d103      	bne.n	8003d62 <vQueueWaitForMessageRestricted+0x2a>
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d68:	b25b      	sxtb	r3, r3
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d6e:	d103      	bne.n	8003d78 <vQueueWaitForMessageRestricted+0x40>
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d78:	f7ff fa34 	bl	80031e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	3324      	adds	r3, #36	; 0x24
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fc61 	bl	8004654 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f7ff ff26 	bl	8003be4 <prvUnlockQueue>
	}
 8003d98:	bf00      	nop
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08e      	sub	sp, #56	; 0x38
 8003da4:	af04      	add	r7, sp, #16
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <xTaskCreateStatic+0x2a>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	623b      	str	r3, [r7, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	61fb      	str	r3, [r7, #28]
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003de6:	23bc      	movs	r3, #188	; 0xbc
 8003de8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2bbc      	cmp	r3, #188	; 0xbc
 8003dee:	d00a      	beq.n	8003e06 <xTaskCreateStatic+0x66>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	61bb      	str	r3, [r7, #24]
}
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01e      	beq.n	8003e4c <xTaskCreateStatic+0xac>
 8003e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01b      	beq.n	8003e4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e26:	2300      	movs	r3, #0
 8003e28:	9303      	str	r3, [sp, #12]
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	9302      	str	r3, [sp, #8]
 8003e2e:	f107 0314 	add.w	r3, r7, #20
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f850 	bl	8003ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e46:	f000 f8f3 	bl	8004030 <prvAddNewTaskToReadyList>
 8003e4a:	e001      	b.n	8003e50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e50:	697b      	ldr	r3, [r7, #20]
	}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3728      	adds	r7, #40	; 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b08c      	sub	sp, #48	; 0x30
 8003e5e:	af04      	add	r7, sp, #16
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe fdbe 	bl	80029f0 <pvPortMalloc>
 8003e74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e7c:	20bc      	movs	r0, #188	; 0xbc
 8003e7e:	f7fe fdb7 	bl	80029f0 <pvPortMalloc>
 8003e82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e90:	e005      	b.n	8003e9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	f7fe fe78 	bl	8002b88 <vPortFree>
 8003e98:	e001      	b.n	8003e9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d017      	beq.n	8003ed4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9303      	str	r3, [sp, #12]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	9302      	str	r3, [sp, #8]
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f80e 	bl	8003ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ec8:	69f8      	ldr	r0, [r7, #28]
 8003eca:	f000 f8b1 	bl	8004030 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e002      	b.n	8003eda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ed8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003eda:	69bb      	ldr	r3, [r7, #24]
	}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3720      	adds	r7, #32
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	461a      	mov	r2, r3
 8003efc:	21a5      	movs	r1, #165	; 0xa5
 8003efe:	f002 f83b 	bl	8005f78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003f0c:	440b      	add	r3, r1
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	617b      	str	r3, [r7, #20]
}
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01f      	beq.n	8003f82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e012      	b.n	8003f6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	7819      	ldrb	r1, [r3, #0]
 8003f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	3334      	adds	r3, #52	; 0x34
 8003f58:	460a      	mov	r2, r1
 8003f5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d006      	beq.n	8003f76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2b0f      	cmp	r3, #15
 8003f72:	d9e9      	bls.n	8003f48 <prvInitialiseNewTask+0x64>
 8003f74:	e000      	b.n	8003f78 <prvInitialiseNewTask+0x94>
			{
				break;
 8003f76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f80:	e003      	b.n	8003f8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	2b37      	cmp	r3, #55	; 0x37
 8003f8e:	d901      	bls.n	8003f94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f90:	2337      	movs	r3, #55	; 0x37
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe ff2a 	bl	8002e04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	3318      	adds	r3, #24
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe ff25 	bl	8002e04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	3354      	adds	r3, #84	; 0x54
 8003fe4:	2260      	movs	r2, #96	; 0x60
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f001 ffc5 	bl	8005f78 <memset>
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	4a0c      	ldr	r2, [pc, #48]	; (8004024 <prvInitialiseNewTask+0x140>)
 8003ff2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <prvInitialiseNewTask+0x144>)
 8003ff8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	4a0b      	ldr	r2, [pc, #44]	; (800402c <prvInitialiseNewTask+0x148>)
 8003ffe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	68f9      	ldr	r1, [r7, #12]
 8004004:	69b8      	ldr	r0, [r7, #24]
 8004006:	f7fe ff91 	bl	8002f2c <pxPortInitialiseStack>
 800400a:	4602      	mov	r2, r0
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800401c:	bf00      	nop
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	080061a4 	.word	0x080061a4
 8004028:	080061c4 	.word	0x080061c4
 800402c:	08006184 	.word	0x08006184

08004030 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004038:	f7ff f8a4 	bl	8003184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800403c:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <prvAddNewTaskToReadyList+0xc4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <prvAddNewTaskToReadyList+0xc4>)
 8004044:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004046:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800404e:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <prvAddNewTaskToReadyList+0xc4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d110      	bne.n	800407e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800405c:	f000 fc26 	bl	80048ac <prvInitialiseTaskLists>
 8004060:	e00d      	b.n	800407e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004062:	4b26      	ldr	r3, [pc, #152]	; (80040fc <prvAddNewTaskToReadyList+0xcc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	429a      	cmp	r2, r3
 8004076:	d802      	bhi.n	800407e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004078:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <prvAddNewTaskToReadyList+0xd0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <prvAddNewTaskToReadyList+0xd0>)
 8004086:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004088:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <prvAddNewTaskToReadyList+0xd0>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <prvAddNewTaskToReadyList+0xd4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d903      	bls.n	80040a4 <prvAddNewTaskToReadyList+0x74>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <prvAddNewTaskToReadyList+0xd4>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a15      	ldr	r2, [pc, #84]	; (8004108 <prvAddNewTaskToReadyList+0xd8>)
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7fe feaf 	bl	8002e1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040c0:	f7ff f890 	bl	80031e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040c4:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <prvAddNewTaskToReadyList+0xcc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d207      	bcs.n	80040ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <prvAddNewTaskToReadyList+0xdc>)
 80040dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	240049d4 	.word	0x240049d4
 80040f8:	24004500 	.word	0x24004500
 80040fc:	240049e0 	.word	0x240049e0
 8004100:	240049f0 	.word	0x240049f0
 8004104:	240049dc 	.word	0x240049dc
 8004108:	24004504 	.word	0x24004504
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d017      	beq.n	8004152 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <vTaskDelay+0x60>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <vTaskDelay+0x30>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	60bb      	str	r3, [r7, #8]
}
 800413c:	bf00      	nop
 800413e:	e7fe      	b.n	800413e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004140:	f000 f88a 	bl	8004258 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004144:	2100      	movs	r1, #0
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fd92 	bl	8004c70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800414c:	f000 f892 	bl	8004274 <xTaskResumeAll>
 8004150:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d107      	bne.n	8004168 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <vTaskDelay+0x64>)
 800415a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	240049fc 	.word	0x240049fc
 8004174:	e000ed04 	.word	0xe000ed04

08004178 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004186:	463a      	mov	r2, r7
 8004188:	1d39      	adds	r1, r7, #4
 800418a:	f107 0308 	add.w	r3, r7, #8
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe fbfa 	bl	8002988 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004194:	6839      	ldr	r1, [r7, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	9202      	str	r2, [sp, #8]
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	2300      	movs	r3, #0
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	2300      	movs	r3, #0
 80041a4:	460a      	mov	r2, r1
 80041a6:	4924      	ldr	r1, [pc, #144]	; (8004238 <vTaskStartScheduler+0xc0>)
 80041a8:	4824      	ldr	r0, [pc, #144]	; (800423c <vTaskStartScheduler+0xc4>)
 80041aa:	f7ff fdf9 	bl	8003da0 <xTaskCreateStatic>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4a23      	ldr	r2, [pc, #140]	; (8004240 <vTaskStartScheduler+0xc8>)
 80041b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041b4:	4b22      	ldr	r3, [pc, #136]	; (8004240 <vTaskStartScheduler+0xc8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041bc:	2301      	movs	r3, #1
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e001      	b.n	80041c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d102      	bne.n	80041d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041cc:	f000 fda4 	bl	8004d18 <xTimerCreateTimerTask>
 80041d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d11b      	bne.n	8004210 <vTaskStartScheduler+0x98>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	613b      	str	r3, [r7, #16]
}
 80041ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041ec:	4b15      	ldr	r3, [pc, #84]	; (8004244 <vTaskStartScheduler+0xcc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3354      	adds	r3, #84	; 0x54
 80041f2:	4a15      	ldr	r2, [pc, #84]	; (8004248 <vTaskStartScheduler+0xd0>)
 80041f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <vTaskStartScheduler+0xd4>)
 80041f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041fe:	4b14      	ldr	r3, [pc, #80]	; (8004250 <vTaskStartScheduler+0xd8>)
 8004200:	2201      	movs	r2, #1
 8004202:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <vTaskStartScheduler+0xdc>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800420a:	f7fe ff19 	bl	8003040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800420e:	e00e      	b.n	800422e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004216:	d10a      	bne.n	800422e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	60fb      	str	r3, [r7, #12]
}
 800422a:	bf00      	nop
 800422c:	e7fe      	b.n	800422c <vTaskStartScheduler+0xb4>
}
 800422e:	bf00      	nop
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	08006138 	.word	0x08006138
 800423c:	0800487d 	.word	0x0800487d
 8004240:	240049f8 	.word	0x240049f8
 8004244:	24004500 	.word	0x24004500
 8004248:	24000014 	.word	0x24000014
 800424c:	240049f4 	.word	0x240049f4
 8004250:	240049e0 	.word	0x240049e0
 8004254:	240049d8 	.word	0x240049d8

08004258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <vTaskSuspendAll+0x18>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3301      	adds	r3, #1
 8004262:	4a03      	ldr	r2, [pc, #12]	; (8004270 <vTaskSuspendAll+0x18>)
 8004264:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004266:	bf00      	nop
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	240049fc 	.word	0x240049fc

08004274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004282:	4b42      	ldr	r3, [pc, #264]	; (800438c <xTaskResumeAll+0x118>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	603b      	str	r3, [r7, #0]
}
 800429c:	bf00      	nop
 800429e:	e7fe      	b.n	800429e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042a0:	f7fe ff70 	bl	8003184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042a4:	4b39      	ldr	r3, [pc, #228]	; (800438c <xTaskResumeAll+0x118>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	4a38      	ldr	r2, [pc, #224]	; (800438c <xTaskResumeAll+0x118>)
 80042ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042ae:	4b37      	ldr	r3, [pc, #220]	; (800438c <xTaskResumeAll+0x118>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d162      	bne.n	800437c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042b6:	4b36      	ldr	r3, [pc, #216]	; (8004390 <xTaskResumeAll+0x11c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d05e      	beq.n	800437c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042be:	e02f      	b.n	8004320 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c0:	4b34      	ldr	r3, [pc, #208]	; (8004394 <xTaskResumeAll+0x120>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3318      	adds	r3, #24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe fe03 	bl	8002ed8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fdfe 	bl	8002ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <xTaskResumeAll+0x124>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d903      	bls.n	80042f0 <xTaskResumeAll+0x7c>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <xTaskResumeAll+0x124>)
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4a27      	ldr	r2, [pc, #156]	; (800439c <xTaskResumeAll+0x128>)
 80042fe:	441a      	add	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7fe fd89 	bl	8002e1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <xTaskResumeAll+0x12c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800431a:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <xTaskResumeAll+0x130>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004320:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <xTaskResumeAll+0x120>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1cb      	bne.n	80042c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800432e:	f000 fb5f 	bl	80049f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004332:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <xTaskResumeAll+0x134>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d010      	beq.n	8004360 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800433e:	f000 f847 	bl	80043d0 <xTaskIncrementTick>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004348:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <xTaskResumeAll+0x130>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3b01      	subs	r3, #1
 8004352:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f1      	bne.n	800433e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <xTaskResumeAll+0x134>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004360:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <xTaskResumeAll+0x130>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d009      	beq.n	800437c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004368:	2301      	movs	r3, #1
 800436a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800436c:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <xTaskResumeAll+0x138>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800437c:	f7fe ff32 	bl	80031e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004380:	68bb      	ldr	r3, [r7, #8]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	240049fc 	.word	0x240049fc
 8004390:	240049d4 	.word	0x240049d4
 8004394:	24004994 	.word	0x24004994
 8004398:	240049dc 	.word	0x240049dc
 800439c:	24004504 	.word	0x24004504
 80043a0:	24004500 	.word	0x24004500
 80043a4:	240049e8 	.word	0x240049e8
 80043a8:	240049e4 	.word	0x240049e4
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <xTaskGetTickCount+0x1c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043bc:	687b      	ldr	r3, [r7, #4]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	240049d8 	.word	0x240049d8

080043d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043da:	4b4f      	ldr	r3, [pc, #316]	; (8004518 <xTaskIncrementTick+0x148>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f040 808f 	bne.w	8004502 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043e4:	4b4d      	ldr	r3, [pc, #308]	; (800451c <xTaskIncrementTick+0x14c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043ec:	4a4b      	ldr	r2, [pc, #300]	; (800451c <xTaskIncrementTick+0x14c>)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d120      	bne.n	800443a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043f8:	4b49      	ldr	r3, [pc, #292]	; (8004520 <xTaskIncrementTick+0x150>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <xTaskIncrementTick+0x48>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	603b      	str	r3, [r7, #0]
}
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <xTaskIncrementTick+0x46>
 8004418:	4b41      	ldr	r3, [pc, #260]	; (8004520 <xTaskIncrementTick+0x150>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	4b41      	ldr	r3, [pc, #260]	; (8004524 <xTaskIncrementTick+0x154>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a3f      	ldr	r2, [pc, #252]	; (8004520 <xTaskIncrementTick+0x150>)
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4a3f      	ldr	r2, [pc, #252]	; (8004524 <xTaskIncrementTick+0x154>)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b3e      	ldr	r3, [pc, #248]	; (8004528 <xTaskIncrementTick+0x158>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3301      	adds	r3, #1
 8004432:	4a3d      	ldr	r2, [pc, #244]	; (8004528 <xTaskIncrementTick+0x158>)
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	f000 fadb 	bl	80049f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800443a:	4b3c      	ldr	r3, [pc, #240]	; (800452c <xTaskIncrementTick+0x15c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	429a      	cmp	r2, r3
 8004442:	d349      	bcc.n	80044d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004444:	4b36      	ldr	r3, [pc, #216]	; (8004520 <xTaskIncrementTick+0x150>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d104      	bne.n	8004458 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800444e:	4b37      	ldr	r3, [pc, #220]	; (800452c <xTaskIncrementTick+0x15c>)
 8004450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004454:	601a      	str	r2, [r3, #0]
					break;
 8004456:	e03f      	b.n	80044d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004458:	4b31      	ldr	r3, [pc, #196]	; (8004520 <xTaskIncrementTick+0x150>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d203      	bcs.n	8004478 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004470:	4a2e      	ldr	r2, [pc, #184]	; (800452c <xTaskIncrementTick+0x15c>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004476:	e02f      	b.n	80044d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	3304      	adds	r3, #4
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe fd2b 	bl	8002ed8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	3318      	adds	r3, #24
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe fd22 	bl	8002ed8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004498:	4b25      	ldr	r3, [pc, #148]	; (8004530 <xTaskIncrementTick+0x160>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d903      	bls.n	80044a8 <xTaskIncrementTick+0xd8>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	4a22      	ldr	r2, [pc, #136]	; (8004530 <xTaskIncrementTick+0x160>)
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <xTaskIncrementTick+0x164>)
 80044b6:	441a      	add	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f7fe fcad 	bl	8002e1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c8:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <xTaskIncrementTick+0x168>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3b8      	bcc.n	8004444 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80044d2:	2301      	movs	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044d6:	e7b5      	b.n	8004444 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044d8:	4b17      	ldr	r3, [pc, #92]	; (8004538 <xTaskIncrementTick+0x168>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	4915      	ldr	r1, [pc, #84]	; (8004534 <xTaskIncrementTick+0x164>)
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d901      	bls.n	80044f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80044f0:	2301      	movs	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <xTaskIncrementTick+0x16c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80044fc:	2301      	movs	r3, #1
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	e004      	b.n	800450c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <xTaskIncrementTick+0x170>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <xTaskIncrementTick+0x170>)
 800450a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800450c:	697b      	ldr	r3, [r7, #20]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	240049fc 	.word	0x240049fc
 800451c:	240049d8 	.word	0x240049d8
 8004520:	2400498c 	.word	0x2400498c
 8004524:	24004990 	.word	0x24004990
 8004528:	240049ec 	.word	0x240049ec
 800452c:	240049f4 	.word	0x240049f4
 8004530:	240049dc 	.word	0x240049dc
 8004534:	24004504 	.word	0x24004504
 8004538:	24004500 	.word	0x24004500
 800453c:	240049e8 	.word	0x240049e8
 8004540:	240049e4 	.word	0x240049e4

08004544 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800454a:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <vTaskSwitchContext+0xb0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004552:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <vTaskSwitchContext+0xb4>)
 8004554:	2201      	movs	r2, #1
 8004556:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004558:	e046      	b.n	80045e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800455a:	4b27      	ldr	r3, [pc, #156]	; (80045f8 <vTaskSwitchContext+0xb4>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004560:	4b26      	ldr	r3, [pc, #152]	; (80045fc <vTaskSwitchContext+0xb8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	e010      	b.n	800458a <vTaskSwitchContext+0x46>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <vTaskSwitchContext+0x40>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	607b      	str	r3, [r7, #4]
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <vTaskSwitchContext+0x3e>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3b01      	subs	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	491d      	ldr	r1, [pc, #116]	; (8004600 <vTaskSwitchContext+0xbc>)
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0e4      	beq.n	8004568 <vTaskSwitchContext+0x24>
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4a15      	ldr	r2, [pc, #84]	; (8004600 <vTaskSwitchContext+0xbc>)
 80045aa:	4413      	add	r3, r2
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	605a      	str	r2, [r3, #4]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	3308      	adds	r3, #8
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d104      	bne.n	80045ce <vTaskSwitchContext+0x8a>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4a0b      	ldr	r2, [pc, #44]	; (8004604 <vTaskSwitchContext+0xc0>)
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	4a08      	ldr	r2, [pc, #32]	; (80045fc <vTaskSwitchContext+0xb8>)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <vTaskSwitchContext+0xc0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3354      	adds	r3, #84	; 0x54
 80045e4:	4a08      	ldr	r2, [pc, #32]	; (8004608 <vTaskSwitchContext+0xc4>)
 80045e6:	6013      	str	r3, [r2, #0]
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	240049fc 	.word	0x240049fc
 80045f8:	240049e8 	.word	0x240049e8
 80045fc:	240049dc 	.word	0x240049dc
 8004600:	24004504 	.word	0x24004504
 8004604:	24004500 	.word	0x24004500
 8004608:	24000014 	.word	0x24000014

0800460c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	60fb      	str	r3, [r7, #12]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004632:	4b07      	ldr	r3, [pc, #28]	; (8004650 <vTaskPlaceOnEventList+0x44>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3318      	adds	r3, #24
 8004638:	4619      	mov	r1, r3
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fe fc13 	bl	8002e66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004640:	2101      	movs	r1, #1
 8004642:	6838      	ldr	r0, [r7, #0]
 8004644:	f000 fb14 	bl	8004c70 <prvAddCurrentTaskToDelayedList>
}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	24004500 	.word	0x24004500

08004654 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	617b      	str	r3, [r7, #20]
}
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3318      	adds	r3, #24
 8004682:	4619      	mov	r1, r3
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f7fe fbca 	bl	8002e1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004694:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	68b8      	ldr	r0, [r7, #8]
 800469a:	f000 fae9 	bl	8004c70 <prvAddCurrentTaskToDelayedList>
	}
 800469e:	bf00      	nop
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	24004500 	.word	0x24004500

080046ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	60fb      	str	r3, [r7, #12]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	3318      	adds	r3, #24
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe fbfb 	bl	8002ed8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046e2:	4b1e      	ldr	r3, [pc, #120]	; (800475c <xTaskRemoveFromEventList+0xb0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d11d      	bne.n	8004726 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe fbf2 	bl	8002ed8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f8:	4b19      	ldr	r3, [pc, #100]	; (8004760 <xTaskRemoveFromEventList+0xb4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d903      	bls.n	8004708 <xTaskRemoveFromEventList+0x5c>
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	4a16      	ldr	r2, [pc, #88]	; (8004760 <xTaskRemoveFromEventList+0xb4>)
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4a13      	ldr	r2, [pc, #76]	; (8004764 <xTaskRemoveFromEventList+0xb8>)
 8004716:	441a      	add	r2, r3
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f7fe fb7d 	bl	8002e1e <vListInsertEnd>
 8004724:	e005      	b.n	8004732 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	3318      	adds	r3, #24
 800472a:	4619      	mov	r1, r3
 800472c:	480e      	ldr	r0, [pc, #56]	; (8004768 <xTaskRemoveFromEventList+0xbc>)
 800472e:	f7fe fb76 	bl	8002e1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004736:	4b0d      	ldr	r3, [pc, #52]	; (800476c <xTaskRemoveFromEventList+0xc0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	429a      	cmp	r2, r3
 800473e:	d905      	bls.n	800474c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004740:	2301      	movs	r3, #1
 8004742:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <xTaskRemoveFromEventList+0xc4>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e001      	b.n	8004750 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004750:	697b      	ldr	r3, [r7, #20]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	240049fc 	.word	0x240049fc
 8004760:	240049dc 	.word	0x240049dc
 8004764:	24004504 	.word	0x24004504
 8004768:	24004994 	.word	0x24004994
 800476c:	24004500 	.word	0x24004500
 8004770:	240049e8 	.word	0x240049e8

08004774 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800477c:	4b06      	ldr	r3, [pc, #24]	; (8004798 <vTaskInternalSetTimeOutState+0x24>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <vTaskInternalSetTimeOutState+0x28>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	605a      	str	r2, [r3, #4]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	240049ec 	.word	0x240049ec
 800479c:	240049d8 	.word	0x240049d8

080047a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	60fb      	str	r3, [r7, #12]
}
 80047de:	bf00      	nop
 80047e0:	e7fe      	b.n	80047e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80047e2:	f7fe fccf 	bl	8003184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047e6:	4b1d      	ldr	r3, [pc, #116]	; (800485c <xTaskCheckForTimeOut+0xbc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047fe:	d102      	bne.n	8004806 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	e023      	b.n	800484e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b15      	ldr	r3, [pc, #84]	; (8004860 <xTaskCheckForTimeOut+0xc0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d007      	beq.n	8004822 <xTaskCheckForTimeOut+0x82>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	429a      	cmp	r2, r3
 800481a:	d302      	bcc.n	8004822 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800481c:	2301      	movs	r3, #1
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	e015      	b.n	800484e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	429a      	cmp	r2, r3
 800482a:	d20b      	bcs.n	8004844 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	1ad2      	subs	r2, r2, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff ff9b 	bl	8004774 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e004      	b.n	800484e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800484a:	2301      	movs	r3, #1
 800484c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800484e:	f7fe fcc9 	bl	80031e4 <vPortExitCritical>

	return xReturn;
 8004852:	69fb      	ldr	r3, [r7, #28]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	240049d8 	.word	0x240049d8
 8004860:	240049ec 	.word	0x240049ec

08004864 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <vTaskMissedYield+0x14>)
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]
}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	240049e8 	.word	0x240049e8

0800487c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004884:	f000 f852 	bl	800492c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <prvIdleTask+0x28>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d9f9      	bls.n	8004884 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <prvIdleTask+0x2c>)
 8004892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048a0:	e7f0      	b.n	8004884 <prvIdleTask+0x8>
 80048a2:	bf00      	nop
 80048a4:	24004504 	.word	0x24004504
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
 80048b6:	e00c      	b.n	80048d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4a12      	ldr	r2, [pc, #72]	; (800490c <prvInitialiseTaskLists+0x60>)
 80048c4:	4413      	add	r3, r2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fa7c 	bl	8002dc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3301      	adds	r3, #1
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b37      	cmp	r3, #55	; 0x37
 80048d6:	d9ef      	bls.n	80048b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048d8:	480d      	ldr	r0, [pc, #52]	; (8004910 <prvInitialiseTaskLists+0x64>)
 80048da:	f7fe fa73 	bl	8002dc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048de:	480d      	ldr	r0, [pc, #52]	; (8004914 <prvInitialiseTaskLists+0x68>)
 80048e0:	f7fe fa70 	bl	8002dc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048e4:	480c      	ldr	r0, [pc, #48]	; (8004918 <prvInitialiseTaskLists+0x6c>)
 80048e6:	f7fe fa6d 	bl	8002dc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048ea:	480c      	ldr	r0, [pc, #48]	; (800491c <prvInitialiseTaskLists+0x70>)
 80048ec:	f7fe fa6a 	bl	8002dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048f0:	480b      	ldr	r0, [pc, #44]	; (8004920 <prvInitialiseTaskLists+0x74>)
 80048f2:	f7fe fa67 	bl	8002dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <prvInitialiseTaskLists+0x78>)
 80048f8:	4a05      	ldr	r2, [pc, #20]	; (8004910 <prvInitialiseTaskLists+0x64>)
 80048fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <prvInitialiseTaskLists+0x7c>)
 80048fe:	4a05      	ldr	r2, [pc, #20]	; (8004914 <prvInitialiseTaskLists+0x68>)
 8004900:	601a      	str	r2, [r3, #0]
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	24004504 	.word	0x24004504
 8004910:	24004964 	.word	0x24004964
 8004914:	24004978 	.word	0x24004978
 8004918:	24004994 	.word	0x24004994
 800491c:	240049a8 	.word	0x240049a8
 8004920:	240049c0 	.word	0x240049c0
 8004924:	2400498c 	.word	0x2400498c
 8004928:	24004990 	.word	0x24004990

0800492c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004932:	e019      	b.n	8004968 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004934:	f7fe fc26 	bl	8003184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004938:	4b10      	ldr	r3, [pc, #64]	; (800497c <prvCheckTasksWaitingTermination+0x50>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	4618      	mov	r0, r3
 8004946:	f7fe fac7 	bl	8002ed8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800494a:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <prvCheckTasksWaitingTermination+0x54>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3b01      	subs	r3, #1
 8004950:	4a0b      	ldr	r2, [pc, #44]	; (8004980 <prvCheckTasksWaitingTermination+0x54>)
 8004952:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <prvCheckTasksWaitingTermination+0x58>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3b01      	subs	r3, #1
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <prvCheckTasksWaitingTermination+0x58>)
 800495c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800495e:	f7fe fc41 	bl	80031e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f810 	bl	8004988 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <prvCheckTasksWaitingTermination+0x58>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e1      	bne.n	8004934 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	240049a8 	.word	0x240049a8
 8004980:	240049d4 	.word	0x240049d4
 8004984:	240049bc 	.word	0x240049bc

08004988 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3354      	adds	r3, #84	; 0x54
 8004994:	4618      	mov	r0, r3
 8004996:	f001 fb05 	bl	8005fa4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fe f8ed 	bl	8002b88 <vPortFree>
				vPortFree( pxTCB );
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fe f8ea 	bl	8002b88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049b4:	e018      	b.n	80049e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d103      	bne.n	80049c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7fe f8e1 	bl	8002b88 <vPortFree>
	}
 80049c6:	e00f      	b.n	80049e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d00a      	beq.n	80049e8 <prvDeleteTCB+0x60>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	60fb      	str	r3, [r7, #12]
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <prvDeleteTCB+0x5e>
	}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049f6:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <prvResetNextTaskUnblockTime+0x38>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <prvResetNextTaskUnblockTime+0x3c>)
 8004a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a08:	e008      	b.n	8004a1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a0a:	4b07      	ldr	r3, [pc, #28]	; (8004a28 <prvResetNextTaskUnblockTime+0x38>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <prvResetNextTaskUnblockTime+0x3c>)
 8004a1a:	6013      	str	r3, [r2, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	2400498c 	.word	0x2400498c
 8004a2c:	240049f4 	.word	0x240049f4

08004a30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <xTaskGetSchedulerState+0x34>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	e008      	b.n	8004a56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a44:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <xTaskGetSchedulerState+0x38>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	607b      	str	r3, [r7, #4]
 8004a50:	e001      	b.n	8004a56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a56:	687b      	ldr	r3, [r7, #4]
	}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	240049e0 	.word	0x240049e0
 8004a68:	240049fc 	.word	0x240049fc

08004a6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d056      	beq.n	8004b30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a82:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <xTaskPriorityDisinherit+0xd0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d00a      	beq.n	8004aa2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	60fb      	str	r3, [r7, #12]
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	60bb      	str	r3, [r7, #8]
}
 8004abc:	bf00      	nop
 8004abe:	e7fe      	b.n	8004abe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac4:	1e5a      	subs	r2, r3, #1
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d02c      	beq.n	8004b30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d128      	bne.n	8004b30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe f9f8 	bl	8002ed8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <xTaskPriorityDisinherit+0xd4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d903      	bls.n	8004b10 <xTaskPriorityDisinherit+0xa4>
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <xTaskPriorityDisinherit+0xd4>)
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4a09      	ldr	r2, [pc, #36]	; (8004b44 <xTaskPriorityDisinherit+0xd8>)
 8004b1e:	441a      	add	r2, r3
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f7fe f979 	bl	8002e1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b30:	697b      	ldr	r3, [r7, #20]
	}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	24004500 	.word	0x24004500
 8004b40:	240049dc 	.word	0x240049dc
 8004b44:	24004504 	.word	0x24004504

08004b48 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	61bb      	str	r3, [r7, #24]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b6e:	f7fe fbeb 	bl	8003348 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8004b76:	f3ef 8211 	mrs	r2, BASEPRI
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	617a      	str	r2, [r7, #20]
 8004b8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004b8e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b90:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004b98:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004bb0:	7ffb      	ldrb	r3, [r7, #31]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d146      	bne.n	8004c44 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	60fb      	str	r3, [r7, #12]
}
 8004bd0:	bf00      	nop
 8004bd2:	e7fe      	b.n	8004bd2 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd4:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <vTaskNotifyGiveFromISR+0x110>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d11d      	bne.n	8004c18 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	3304      	adds	r3, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe f979 	bl	8002ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bea:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <vTaskNotifyGiveFromISR+0x114>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d903      	bls.n	8004bfa <vTaskNotifyGiveFromISR+0xb2>
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	4a19      	ldr	r2, [pc, #100]	; (8004c5c <vTaskNotifyGiveFromISR+0x114>)
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <vTaskNotifyGiveFromISR+0x118>)
 8004c08:	441a      	add	r2, r3
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f7fe f904 	bl	8002e1e <vListInsertEnd>
 8004c16:	e005      	b.n	8004c24 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	3318      	adds	r3, #24
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4811      	ldr	r0, [pc, #68]	; (8004c64 <vTaskNotifyGiveFromISR+0x11c>)
 8004c20:	f7fe f8fd 	bl	8002e1e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <vTaskNotifyGiveFromISR+0x120>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d908      	bls.n	8004c44 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <vTaskNotifyGiveFromISR+0x124>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f383 8811 	msr	BASEPRI, r3
}
 8004c4e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8004c50:	bf00      	nop
 8004c52:	3728      	adds	r7, #40	; 0x28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	240049fc 	.word	0x240049fc
 8004c5c:	240049dc 	.word	0x240049dc
 8004c60:	24004504 	.word	0x24004504
 8004c64:	24004994 	.word	0x24004994
 8004c68:	24004500 	.word	0x24004500
 8004c6c:	240049e8 	.word	0x240049e8

08004c70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c7a:	4b21      	ldr	r3, [pc, #132]	; (8004d00 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c80:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3304      	adds	r3, #4
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe f926 	bl	8002ed8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c92:	d10a      	bne.n	8004caa <prvAddCurrentTaskToDelayedList+0x3a>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4819      	ldr	r0, [pc, #100]	; (8004d08 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ca4:	f7fe f8bb 	bl	8002e1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ca8:	e026      	b.n	8004cf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4413      	add	r3, r2
 8004cb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cb2:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d209      	bcs.n	8004cd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc2:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7fe f8c9 	bl	8002e66 <vListInsert>
}
 8004cd4:	e010      	b.n	8004cf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cd6:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f7fe f8bf 	bl	8002e66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d202      	bcs.n	8004cf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cf2:	4a08      	ldr	r2, [pc, #32]	; (8004d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	6013      	str	r3, [r2, #0]
}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	240049d8 	.word	0x240049d8
 8004d04:	24004500 	.word	0x24004500
 8004d08:	240049c0 	.word	0x240049c0
 8004d0c:	24004990 	.word	0x24004990
 8004d10:	2400498c 	.word	0x2400498c
 8004d14:	240049f4 	.word	0x240049f4

08004d18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d22:	f000 fb07 	bl	8005334 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d26:	4b1c      	ldr	r3, [pc, #112]	; (8004d98 <xTimerCreateTimerTask+0x80>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d021      	beq.n	8004d72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d36:	1d3a      	adds	r2, r7, #4
 8004d38:	f107 0108 	add.w	r1, r7, #8
 8004d3c:	f107 030c 	add.w	r3, r7, #12
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fd fe3b 	bl	80029bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	9202      	str	r2, [sp, #8]
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	2302      	movs	r3, #2
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2300      	movs	r3, #0
 8004d56:	460a      	mov	r2, r1
 8004d58:	4910      	ldr	r1, [pc, #64]	; (8004d9c <xTimerCreateTimerTask+0x84>)
 8004d5a:	4811      	ldr	r0, [pc, #68]	; (8004da0 <xTimerCreateTimerTask+0x88>)
 8004d5c:	f7ff f820 	bl	8003da0 <xTaskCreateStatic>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4a10      	ldr	r2, [pc, #64]	; (8004da4 <xTimerCreateTimerTask+0x8c>)
 8004d64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d66:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <xTimerCreateTimerTask+0x8c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	613b      	str	r3, [r7, #16]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d8e:	697b      	ldr	r3, [r7, #20]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	24004a30 	.word	0x24004a30
 8004d9c:	08006140 	.word	0x08006140
 8004da0:	08004edd 	.word	0x08004edd
 8004da4:	24004a34 	.word	0x24004a34

08004da8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	623b      	str	r3, [r7, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dd6:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <xTimerGenericCommand+0x98>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d02a      	beq.n	8004e34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	dc18      	bgt.n	8004e22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004df0:	f7ff fe1e 	bl	8004a30 <xTaskGetSchedulerState>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d109      	bne.n	8004e0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dfa:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <xTimerGenericCommand+0x98>)
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	f107 0110 	add.w	r1, r7, #16
 8004e02:	2300      	movs	r3, #0
 8004e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e06:	f7fe fbe3 	bl	80035d0 <xQueueGenericSend>
 8004e0a:	6278      	str	r0, [r7, #36]	; 0x24
 8004e0c:	e012      	b.n	8004e34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e0e:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <xTimerGenericCommand+0x98>)
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	f107 0110 	add.w	r1, r7, #16
 8004e16:	2300      	movs	r3, #0
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f7fe fbd9 	bl	80035d0 <xQueueGenericSend>
 8004e1e:	6278      	str	r0, [r7, #36]	; 0x24
 8004e20:	e008      	b.n	8004e34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e22:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <xTimerGenericCommand+0x98>)
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	f107 0110 	add.w	r1, r7, #16
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	f7fe fccd 	bl	80037cc <xQueueGenericSendFromISR>
 8004e32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3728      	adds	r7, #40	; 0x28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	24004a30 	.word	0x24004a30

08004e44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e4e:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <prvProcessExpiredTimer+0x94>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe f83b 	bl	8002ed8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d022      	beq.n	8004eb6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	18d1      	adds	r1, r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	6978      	ldr	r0, [r7, #20]
 8004e7e:	f000 f8d1 	bl	8005024 <prvInsertTimerInActiveList>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01f      	beq.n	8004ec8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e88:	2300      	movs	r3, #0
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	2100      	movs	r1, #0
 8004e92:	6978      	ldr	r0, [r7, #20]
 8004e94:	f7ff ff88 	bl	8004da8 <xTimerGenericCommand>
 8004e98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d113      	bne.n	8004ec8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60fb      	str	r3, [r7, #12]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ebc:	f023 0301 	bic.w	r3, r3, #1
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	6978      	ldr	r0, [r7, #20]
 8004ece:	4798      	blx	r3
}
 8004ed0:	bf00      	nop
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	24004a28 	.word	0x24004a28

08004edc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ee4:	f107 0308 	add.w	r3, r7, #8
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 f857 	bl	8004f9c <prvGetNextExpireTime>
 8004eee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f803 	bl	8004f00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004efa:	f000 f8d5 	bl	80050a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004efe:	e7f1      	b.n	8004ee4 <prvTimerTask+0x8>

08004f00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f0a:	f7ff f9a5 	bl	8004258 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f0e:	f107 0308 	add.w	r3, r7, #8
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 f866 	bl	8004fe4 <prvSampleTimeNow>
 8004f18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d130      	bne.n	8004f82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <prvProcessTimerOrBlockTask+0x3c>
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d806      	bhi.n	8004f3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f2e:	f7ff f9a1 	bl	8004274 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ff85 	bl	8004e44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f3a:	e024      	b.n	8004f86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f42:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <prvProcessTimerOrBlockTask+0x90>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <prvProcessTimerOrBlockTask+0x50>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <prvProcessTimerOrBlockTask+0x52>
 8004f50:	2300      	movs	r3, #0
 8004f52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <prvProcessTimerOrBlockTask+0x94>)
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	f7fe fee9 	bl	8003d38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f66:	f7ff f985 	bl	8004274 <xTaskResumeAll>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f70:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <prvProcessTimerOrBlockTask+0x98>)
 8004f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	f3bf 8f6f 	isb	sy
}
 8004f80:	e001      	b.n	8004f86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f82:	f7ff f977 	bl	8004274 <xTaskResumeAll>
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	24004a2c 	.word	0x24004a2c
 8004f94:	24004a30 	.word	0x24004a30
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <prvGetNextExpireTime+0x44>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <prvGetNextExpireTime+0x16>
 8004fae:	2201      	movs	r2, #1
 8004fb0:	e000      	b.n	8004fb4 <prvGetNextExpireTime+0x18>
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <prvGetNextExpireTime+0x44>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e001      	b.n	8004fd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	24004a28 	.word	0x24004a28

08004fe4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fec:	f7ff f9e0 	bl	80043b0 <xTaskGetTickCount>
 8004ff0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ff2:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <prvSampleTimeNow+0x3c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d205      	bcs.n	8005008 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ffc:	f000 f936 	bl	800526c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e002      	b.n	800500e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800500e:	4a04      	ldr	r2, [pc, #16]	; (8005020 <prvSampleTimeNow+0x3c>)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005014:	68fb      	ldr	r3, [r7, #12]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	24004a38 	.word	0x24004a38

08005024 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	429a      	cmp	r2, r3
 8005048:	d812      	bhi.n	8005070 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	429a      	cmp	r2, r3
 8005056:	d302      	bcc.n	800505e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	e01b      	b.n	8005096 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <prvInsertTimerInActiveList+0x7c>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3304      	adds	r3, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7fd fefc 	bl	8002e66 <vListInsert>
 800506e:	e012      	b.n	8005096 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d206      	bcs.n	8005086 <prvInsertTimerInActiveList+0x62>
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d302      	bcc.n	8005086 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005080:	2301      	movs	r3, #1
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e007      	b.n	8005096 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005086:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <prvInsertTimerInActiveList+0x80>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3304      	adds	r3, #4
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f7fd fee8 	bl	8002e66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005096:	697b      	ldr	r3, [r7, #20]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	24004a2c 	.word	0x24004a2c
 80050a4:	24004a28 	.word	0x24004a28

080050a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08e      	sub	sp, #56	; 0x38
 80050ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050ae:	e0ca      	b.n	8005246 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	da18      	bge.n	80050e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050b6:	1d3b      	adds	r3, r7, #4
 80050b8:	3304      	adds	r3, #4
 80050ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	61fb      	str	r3, [r7, #28]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050de:	6850      	ldr	r0, [r2, #4]
 80050e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e2:	6892      	ldr	r2, [r2, #8]
 80050e4:	4611      	mov	r1, r2
 80050e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f2c0 80aa 	blt.w	8005244 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	3304      	adds	r3, #4
 8005100:	4618      	mov	r0, r3
 8005102:	f7fd fee9 	bl	8002ed8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005106:	463b      	mov	r3, r7
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff ff6b 	bl	8004fe4 <prvSampleTimeNow>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b09      	cmp	r3, #9
 8005114:	f200 8097 	bhi.w	8005246 <prvProcessReceivedCommands+0x19e>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <prvProcessReceivedCommands+0x78>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005149 	.word	0x08005149
 8005124:	08005149 	.word	0x08005149
 8005128:	08005149 	.word	0x08005149
 800512c:	080051bd 	.word	0x080051bd
 8005130:	080051d1 	.word	0x080051d1
 8005134:	0800521b 	.word	0x0800521b
 8005138:	08005149 	.word	0x08005149
 800513c:	08005149 	.word	0x08005149
 8005140:	080051bd 	.word	0x080051bd
 8005144:	080051d1 	.word	0x080051d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800514e:	f043 0301 	orr.w	r3, r3, #1
 8005152:	b2da      	uxtb	r2, r3
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	18d1      	adds	r1, r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005168:	f7ff ff5c 	bl	8005024 <prvInsertTimerInActiveList>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d069      	beq.n	8005246 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005178:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d05e      	beq.n	8005246 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	441a      	add	r2, r3
 8005190:	2300      	movs	r3, #0
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	2100      	movs	r1, #0
 8005198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800519a:	f7ff fe05 	bl	8004da8 <xTimerGenericCommand>
 800519e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d14f      	bne.n	8005246 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	61bb      	str	r3, [r7, #24]
}
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80051ce:	e03a      	b.n	8005246 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	617b      	str	r3, [r7, #20]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	18d1      	adds	r1, r2, r3
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005214:	f7ff ff06 	bl	8005024 <prvInsertTimerInActiveList>
					break;
 8005218:	e015      	b.n	8005246 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800522a:	f7fd fcad 	bl	8002b88 <vPortFree>
 800522e:	e00a      	b.n	8005246 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	b2da      	uxtb	r2, r3
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005242:	e000      	b.n	8005246 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005244:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005246:	4b08      	ldr	r3, [pc, #32]	; (8005268 <prvProcessReceivedCommands+0x1c0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	1d39      	adds	r1, r7, #4
 800524c:	2200      	movs	r2, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fb58 	bl	8003904 <xQueueReceive>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	f47f af2a 	bne.w	80050b0 <prvProcessReceivedCommands+0x8>
	}
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	3730      	adds	r7, #48	; 0x30
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	24004a30 	.word	0x24004a30

0800526c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005272:	e048      	b.n	8005306 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005274:	4b2d      	ldr	r3, [pc, #180]	; (800532c <prvSwitchTimerLists+0xc0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800527e:	4b2b      	ldr	r3, [pc, #172]	; (800532c <prvSwitchTimerLists+0xc0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3304      	adds	r3, #4
 800528c:	4618      	mov	r0, r3
 800528e:	f7fd fe23 	bl	8002ed8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d02e      	beq.n	8005306 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4413      	add	r3, r2
 80052b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d90e      	bls.n	80052d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052c6:	4b19      	ldr	r3, [pc, #100]	; (800532c <prvSwitchTimerLists+0xc0>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f7fd fdc8 	bl	8002e66 <vListInsert>
 80052d6:	e016      	b.n	8005306 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052d8:	2300      	movs	r3, #0
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	2300      	movs	r3, #0
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	2100      	movs	r1, #0
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7ff fd60 	bl	8004da8 <xTimerGenericCommand>
 80052e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	603b      	str	r3, [r7, #0]
}
 8005302:	bf00      	nop
 8005304:	e7fe      	b.n	8005304 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <prvSwitchTimerLists+0xc0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1b1      	bne.n	8005274 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005310:	4b06      	ldr	r3, [pc, #24]	; (800532c <prvSwitchTimerLists+0xc0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005316:	4b06      	ldr	r3, [pc, #24]	; (8005330 <prvSwitchTimerLists+0xc4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a04      	ldr	r2, [pc, #16]	; (800532c <prvSwitchTimerLists+0xc0>)
 800531c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800531e:	4a04      	ldr	r2, [pc, #16]	; (8005330 <prvSwitchTimerLists+0xc4>)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6013      	str	r3, [r2, #0]
}
 8005324:	bf00      	nop
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	24004a28 	.word	0x24004a28
 8005330:	24004a2c 	.word	0x24004a2c

08005334 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800533a:	f7fd ff23 	bl	8003184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800533e:	4b15      	ldr	r3, [pc, #84]	; (8005394 <prvCheckForValidListAndQueue+0x60>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d120      	bne.n	8005388 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005346:	4814      	ldr	r0, [pc, #80]	; (8005398 <prvCheckForValidListAndQueue+0x64>)
 8005348:	f7fd fd3c 	bl	8002dc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800534c:	4813      	ldr	r0, [pc, #76]	; (800539c <prvCheckForValidListAndQueue+0x68>)
 800534e:	f7fd fd39 	bl	8002dc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005352:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <prvCheckForValidListAndQueue+0x6c>)
 8005354:	4a10      	ldr	r2, [pc, #64]	; (8005398 <prvCheckForValidListAndQueue+0x64>)
 8005356:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005358:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <prvCheckForValidListAndQueue+0x70>)
 800535a:	4a10      	ldr	r2, [pc, #64]	; (800539c <prvCheckForValidListAndQueue+0x68>)
 800535c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800535e:	2300      	movs	r3, #0
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <prvCheckForValidListAndQueue+0x74>)
 8005364:	4a11      	ldr	r2, [pc, #68]	; (80053ac <prvCheckForValidListAndQueue+0x78>)
 8005366:	2110      	movs	r1, #16
 8005368:	200a      	movs	r0, #10
 800536a:	f7fe f895 	bl	8003498 <xQueueGenericCreateStatic>
 800536e:	4603      	mov	r3, r0
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <prvCheckForValidListAndQueue+0x60>)
 8005372:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005374:	4b07      	ldr	r3, [pc, #28]	; (8005394 <prvCheckForValidListAndQueue+0x60>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800537c:	4b05      	ldr	r3, [pc, #20]	; (8005394 <prvCheckForValidListAndQueue+0x60>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	490b      	ldr	r1, [pc, #44]	; (80053b0 <prvCheckForValidListAndQueue+0x7c>)
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe fcae 	bl	8003ce4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005388:	f7fd ff2c 	bl	80031e4 <vPortExitCritical>
}
 800538c:	bf00      	nop
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	24004a30 	.word	0x24004a30
 8005398:	24004a00 	.word	0x24004a00
 800539c:	24004a14 	.word	0x24004a14
 80053a0:	24004a28 	.word	0x24004a28
 80053a4:	24004a2c 	.word	0x24004a2c
 80053a8:	24004adc 	.word	0x24004adc
 80053ac:	24004a3c 	.word	0x24004a3c
 80053b0:	08006148 	.word	0x08006148

080053b4 <prvSetFlagsAndNotify>:
}
*/
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 80053c0:	4b10      	ldr	r3, [pc, #64]	; (8005404 <prvSetFlagsAndNotify+0x50>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	4a0e      	ldr	r2, [pc, #56]	; (8005404 <prvSetFlagsAndNotify+0x50>)
 80053ca:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 80053cc:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <prvSetFlagsAndNotify+0x54>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d012      	beq.n	80053fa <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <prvSetFlagsAndNotify+0x54>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f107 020c 	add.w	r2, r7, #12
 80053dc:	4611      	mov	r1, r2
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fbb2 	bl	8004b48 <vTaskNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <prvSetFlagsAndNotify+0x46>
 80053ea:	4b08      	ldr	r3, [pc, #32]	; (800540c <prvSetFlagsAndNotify+0x58>)
 80053ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	f3bf 8f6f 	isb	sy
    }
}
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	24004b2c 	.word	0x24004b2c
 8005408:	24004b30 	.word	0x24004b30
 800540c:	e000ed04 	.word	0xe000ed04

08005410 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8005418:	2002      	movs	r0, #2
 800541a:	f7ff ffcb 	bl	80053b4 <prvSetFlagsAndNotify>
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 800542e:	2001      	movs	r0, #1
 8005430:	f7ff ffc0 	bl	80053b4 <prvSetFlagsAndNotify>
}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 8005444:	2004      	movs	r0, #4
 8005446:	f7ff ffb5 	bl	80053b4 <prvSetFlagsAndNotify>
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	659a      	str	r2, [r3, #88]	; 0x58
    }
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e0d2      	b.n	8005628 <HAL_ETH_Init+0x1b8>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005486:	2b00      	cmp	r3, #0
 8005488:	d102      	bne.n	8005490 <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fb f972 	bl	8000774 <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2223      	movs	r2, #35	; 0x23
 8005494:	659a      	str	r2, [r3, #88]	; 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005496:	4b66      	ldr	r3, [pc, #408]	; (8005630 <HAL_ETH_Init+0x1c0>)
 8005498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800549c:	4a64      	ldr	r2, [pc, #400]	; (8005630 <HAL_ETH_Init+0x1c0>)
 800549e:	f043 0302 	orr.w	r3, r3, #2
 80054a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054a6:	4b62      	ldr	r3, [pc, #392]	; (8005630 <HAL_ETH_Init+0x1c0>)
 80054a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	7a1b      	ldrb	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d103      	bne.n	80054c4 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 80054bc:	2000      	movs	r0, #0
 80054be:	f7fb fb29 	bl	8000b14 <HAL_SYSCFG_ETHInterfaceSelect>
 80054c2:	e003      	b.n	80054cc <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 80054c4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80054c8:	f7fb fb24 	bl	8000b14 <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e2:	601a      	str	r2, [r3, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 80054e4:	f7fb fafe 	bl	8000ae4 <HAL_GetTick>
 80054e8:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 80054ea:	e010      	b.n	800550e <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 80054ec:	f7fb fafa 	bl	8000ae4 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80054fa:	d908      	bls.n	800550e <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2204      	movs	r2, #4
 8005500:	661a      	str	r2, [r3, #96]	; 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 8005502:	21e0      	movs	r1, #224	; 0xe0
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff ffa4 	bl	8005452 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e08c      	b.n	8005628 <HAL_ETH_Init+0x1b8>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e5      	bne.n	80054ec <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fbf7 	bl	8005d14 <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8005526:	f7fc fd91 	bl	800204c <HAL_RCC_GetHCLKFreq>
 800552a:	4603      	mov	r3, r0
 800552c:	4a41      	ldr	r2, [pc, #260]	; (8005634 <HAL_ETH_Init+0x1c4>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	0c9a      	lsrs	r2, r3, #18
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3a01      	subs	r2, #1
 800553a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fb4a 	bl	8005bd8 <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800555a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800555e:	601a      	str	r2, [r3, #0]

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_ETH_Init+0x10e>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	661a      	str	r2, [r3, #96]	; 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8005572:	21e0      	movs	r1, #224	; 0xe0
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff ff6c 	bl	8005452 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e054      	b.n	8005628 <HAL_ETH_Init+0x1b8>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	f241 1308 	movw	r3, #4360	; 0x1108
 8005586:	4413      	add	r3, r2
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b2b      	ldr	r3, [pc, #172]	; (8005638 <HAL_ETH_Init+0x1c8>)
 800558c:	4013      	ands	r3, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6952      	ldr	r2, [r2, #20]
 8005592:	0052      	lsls	r2, r2, #1
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	6809      	ldr	r1, [r1, #0]
 8005598:	431a      	orrs	r2, r3
 800559a:	f241 1308 	movw	r3, #4360	; 0x1108
 800559e:	440b      	add	r3, r1
 80055a0:	601a      	str	r2, [r3, #0]
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fc0e 	bl	8005dc4 <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fc55 	bl	8005e58 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	3305      	adds	r3, #5
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	021a      	lsls	r2, r3, #8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	3304      	adds	r3, #4
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	4619      	mov	r1, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	3303      	adds	r3, #3
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	061a      	lsls	r2, r3, #24
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	3302      	adds	r3, #2
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	3301      	adds	r3, #1
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80055ec:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80055fa:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80055fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	661a      	str	r2, [r3, #96]	; 0x60
            heth->gState = HAL_ETH_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2210      	movs	r2, #16
 800560a:	659a      	str	r2, [r3, #88]	; 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2210      	movs	r2, #16
 8005610:	65da      	str	r2, [r3, #92]	; 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <HAL_ETH_Init+0x1cc>)
 8005618:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a07      	ldr	r2, [pc, #28]	; (8005640 <HAL_ETH_Init+0x1d0>)
 8005622:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 8005626:	2300      	movs	r3, #0
        }
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	58024400 	.word	0x58024400
 8005634:	431bde83 	.word	0x431bde83
 8005638:	ffff8001 	.word	0xffff8001
 800563c:	0c020060 	.word	0x0c020060
 8005640:	0c20c000 	.word	0x0c20c000

08005644 <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565a:	2b40      	cmp	r3, #64	; 0x40
 800565c:	d113      	bne.n	8005686 <HAL_ETH_IRQHandler+0x42>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f241 1334 	movw	r3, #4404	; 0x1134
 8005666:	4413      	add	r3, r2
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d109      	bne.n	8005686 <HAL_ETH_IRQHandler+0x42>
                            heth->RxCpltCallback( heth );
                        }
                    #else
                        {
                            /* Receive complete callback */
                            HAL_ETH_RxCpltCallback( heth );
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fed7 	bl	8005426 <HAL_ETH_RxCpltCallback>
                        }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005680:	f248 0240 	movw	r2, #32832	; 0x8040
 8005684:	601a      	str	r2, [r3, #0]
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d113      	bne.n	80056c0 <HAL_ETH_IRQHandler+0x7c>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	f241 1334 	movw	r3, #4404	; 0x1134
 80056a0:	4413      	add	r3, r2
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d109      	bne.n	80056c0 <HAL_ETH_IRQHandler+0x7c>
                            heth->TxCpltCallback( heth );
                        }
                    #else
                        {
                            /* Transfer complete callback */
                            HAL_ETH_TxCpltCallback( heth );
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff feaf 	bl	8005410 <HAL_ETH_TxCpltCallback>
                        }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80056ba:	f248 0201 	movw	r2, #32769	; 0x8001
 80056be:	601a      	str	r2, [r3, #0]
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056d2:	d14a      	bne.n	800576a <HAL_ETH_IRQHandler+0x126>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	f241 1334 	movw	r3, #4404	; 0x1134
 80056dc:	4413      	add	r3, r2
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e8:	d13f      	bne.n	800576a <HAL_ETH_IRQHandler+0x126>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	f043 0208 	orr.w	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	661a      	str	r2, [r3, #96]	; 0x60

                    /* if fatal bus error occured */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d11c      	bne.n	8005744 <HAL_ETH_IRQHandler+0x100>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	f241 1302 	movw	r3, #4354	; 0x1102
 8005718:	4013      	ands	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6653      	str	r3, [r2, #100]	; 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	f241 1334 	movw	r3, #4404	; 0x1134
 8005726:	4413      	add	r3, r2
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6811      	ldr	r1, [r2, #0]
 800572e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005732:	f241 1334 	movw	r3, #4404	; 0x1134
 8005736:	440b      	add	r3, r1
 8005738:	601a      	str	r2, [r3, #0]

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 800573a:	21e0      	movs	r1, #224	; 0xe0
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff fe88 	bl	8005452 <set_error_state>
 8005742:	e00f      	b.n	8005764 <HAL_ETH_IRQHandler+0x120>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	665a      	str	r2, [r3, #100]	; 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800575e:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8005762:	601a      	str	r2, [r3, #0]
                            heth->DMAErrorCallback( heth );
                        }
                    #else
                        {
                            /* Ethernet DMA Error callback */
                            HAL_ETH_DMAErrorCallback( heth );
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff fe69 	bl	800543c <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005772:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005776:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800577a:	d10f      	bne.n	800579c <HAL_ETH_IRQHandler+0x158>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	669a      	str	r2, [r3, #104]	; 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8005788:	21e0      	movs	r1, #224	; 0xe0
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff fe61 	bl	8005452 <set_error_state>
                        heth->DMAErrorCallback( heth );
                    }
                #else
                    {
                        /* Ethernet MAC Error callback */
                        HAL_ETH_MACErrorCallback( heth );
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f857 	bl	8005844 <HAL_ETH_MACErrorCallback>
                    }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	669a      	str	r2, [r3, #104]	; 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d10d      	bne.n	80057c8 <HAL_ETH_IRQHandler+0x184>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057b4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	66da      	str	r2, [r3, #108]	; 0x6c
                        heth->PMTCallback( heth );
                    }
                #else
                    {
                        /* Ethernet PMT callback */
                        HAL_ETH_PMTCallback( heth );
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f84b 	bl	8005858 <HAL_ETH_PMTCallback>
                    }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d10d      	bne.n	80057f4 <HAL_ETH_IRQHandler+0x1b0>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057e0:	f003 020f 	and.w	r2, r3, #15
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	671a      	str	r2, [r3, #112]	; 0x70
                        heth->EEECallback( heth );
                    }
                #else
                    {
                        /* Ethernet EEE callback */
                        HAL_ETH_EEECallback( heth );
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f83f 	bl	800586c <HAL_ETH_EEECallback>
                    }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	671a      	str	r2, [r3, #112]	; 0x70
            }

            #if defined( DUAL_CORE )
                if( HAL_GetCurrentCPUID() == CM7_CPUID )
 80057f4:	f7fb fa82 	bl	8000cfc <HAL_GetCurrentCPUID>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d10d      	bne.n	800581a <HAL_ETH_IRQHandler+0x1d6>
                {
                    /* check ETH WAKEUP exti flag */
                    if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 80057fe:	4b0f      	ldr	r3, [pc, #60]	; (800583c <HAL_ETH_IRQHandler+0x1f8>)
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d014      	beq.n	8005834 <HAL_ETH_IRQHandler+0x1f0>
                    {
                        /* Clear ETH WAKEUP Exti pending bit */
                        __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 800580a:	4b0c      	ldr	r3, [pc, #48]	; (800583c <HAL_ETH_IRQHandler+0x1f8>)
 800580c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005810:	629a      	str	r2, [r3, #40]	; 0x28
                                heth->WakeUpCallback( heth );
                            }
                        #else
                            {
                                /* ETH WAKEUP callback */
                                HAL_ETH_WakeUpCallback( heth );
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f834 	bl	8005880 <HAL_ETH_WakeUpCallback>
                            HAL_ETH_WakeUpCallback( heth );
                        }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 8005818:	e00c      	b.n	8005834 <HAL_ETH_IRQHandler+0x1f0>
                    if( __HAL_ETH_WAKEUP_EXTID2_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <HAL_ETH_IRQHandler+0x1fc>)
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d006      	beq.n	8005834 <HAL_ETH_IRQHandler+0x1f0>
                        __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <HAL_ETH_IRQHandler+0x1fc>)
 8005828:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800582c:	629a      	str	r2, [r3, #40]	; 0x28
                                HAL_ETH_WakeUpCallback( heth );
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f826 	bl	8005880 <HAL_ETH_WakeUpCallback>
        }
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	58000080 	.word	0x58000080
 8005840:	580000c0 	.word	0x580000c0

08005844 <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 80058a6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	791b      	ldrb	r3, [r3, #4]
 80058ac:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 80058ae:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	7b1b      	ldrb	r3, [r3, #12]
 80058b4:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 80058b6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	7b5b      	ldrb	r3, [r3, #13]
 80058bc:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 80058be:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	7b9b      	ldrb	r3, [r3, #14]
 80058c4:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 80058c6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	7bdb      	ldrb	r3, [r3, #15]
 80058cc:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 80058ce:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	7c12      	ldrb	r2, [r2, #16]
 80058d4:	2a00      	cmp	r2, #0
 80058d6:	d102      	bne.n	80058de <ETH_SetMACConfig+0x4a>
 80058d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80058dc:	e000      	b.n	80058e0 <ETH_SetMACConfig+0x4c>
 80058de:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 80058e0:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	7c52      	ldrb	r2, [r2, #17]
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	d102      	bne.n	80058f0 <ETH_SetMACConfig+0x5c>
 80058ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058ee:	e000      	b.n	80058f2 <ETH_SetMACConfig+0x5e>
 80058f0:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 80058f2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	7c9b      	ldrb	r3, [r3, #18]
 80058f8:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80058fa:	431a      	orrs	r2, r3
                          macconf->Speed |
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8005900:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 8005906:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	7f1b      	ldrb	r3, [r3, #28]
 800590c:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 800590e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	7f5b      	ldrb	r3, [r3, #29]
 8005914:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8005916:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	7f92      	ldrb	r2, [r2, #30]
 800591c:	2a00      	cmp	r2, #0
 800591e:	d102      	bne.n	8005926 <ETH_SetMACConfig+0x92>
 8005920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005924:	e000      	b.n	8005928 <ETH_SetMACConfig+0x94>
 8005926:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8005928:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	7fdb      	ldrb	r3, [r3, #31]
 800592e:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8005930:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005938:	2a00      	cmp	r2, #0
 800593a:	d102      	bne.n	8005942 <ETH_SetMACConfig+0xae>
 800593c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005940:	e000      	b.n	8005944 <ETH_SetMACConfig+0xb0>
 8005942:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8005944:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 800594a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005952:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 8005954:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            macregval = ( macconf->InterPacketGapVal |
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	4b56      	ldr	r3, [pc, #344]	; (8005ac0 <ETH_SetMACConfig+0x22c>)
 8005966:	4013      	ands	r3, r2
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	68f9      	ldr	r1, [r7, #12]
 800596e:	430b      	orrs	r3, r1
 8005970:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800597e:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8005980:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005988:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 800598a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005992:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8005994:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800599c:	2a00      	cmp	r2, #0
 800599e:	d102      	bne.n	80059a6 <ETH_SetMACConfig+0x112>
 80059a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059a4:	e000      	b.n	80059a8 <ETH_SetMACConfig+0x114>
 80059a6:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 80059a8:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	4b42      	ldr	r3, [pc, #264]	; (8005ac4 <ETH_SetMACConfig+0x230>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	68f9      	ldr	r1, [r7, #12]
 80059c2:	430b      	orrs	r3, r1
 80059c4:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059cc:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	4b3a      	ldr	r3, [pc, #232]	; (8005ac8 <ETH_SetMACConfig+0x234>)
 80059de:	4013      	ands	r3, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	430b      	orrs	r3, r1
 80059e8:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80059f0:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80059f6:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	d101      	bne.n	8005a06 <ETH_SetMACConfig+0x172>
 8005a02:	2280      	movs	r2, #128	; 0x80
 8005a04:	e000      	b.n	8005a08 <ETH_SetMACConfig+0x174>
 8005a06:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 8005a08:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a0e:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a1a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005a1e:	4013      	ands	r3, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	68f9      	ldr	r1, [r7, #12]
 8005a26:	430b      	orrs	r3, r1
 8005a28:	6713      	str	r3, [r2, #112]	; 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005a30:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005a38:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a46:	f023 0103 	bic.w	r1, r3, #3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005a5e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d101      	bne.n	8005a82 <ETH_SetMACConfig+0x1ee>
 8005a7e:	2240      	movs	r2, #64	; 0x40
 8005a80:	e000      	b.n	8005a84 <ETH_SetMACConfig+0x1f0>
 8005a82:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 8005a84:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005a8c:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8005a8e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005a96:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005aa4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
        }
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	00048083 	.word	0x00048083
 8005ac4:	c0f88000 	.word	0xc0f88000
 8005ac8:	fffffef0 	.word	0xfffffef0

08005acc <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	4b38      	ldr	r3, [pc, #224]	; (8005bc4 <ETH_SetDMAConfig+0xf8>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	6809      	ldr	r1, [r1, #0]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005af2:	601a      	str	r2, [r3, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	791b      	ldrb	r3, [r3, #4]
 8005af8:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8005afe:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	7b1b      	ldrb	r3, [r3, #12]
 8005b04:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005b12:	4413      	add	r3, r2
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <ETH_SetDMAConfig+0xfc>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6811      	ldr	r1, [r2, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	f241 0304 	movw	r3, #4100	; 0x1004
 8005b26:	440b      	add	r3, r1
 8005b28:	601a      	str	r2, [r3, #0]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	7b5b      	ldrb	r3, [r3, #13]
 8005b2e:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <ETH_SetDMAConfig+0x100>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6811      	ldr	r1, [r2, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005b52:	601a      	str	r2, [r3, #0]

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	7d1b      	ldrb	r3, [r3, #20]
 8005b5c:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 8005b5e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	7f5b      	ldrb	r3, [r3, #29]
 8005b64:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005b72:	4413      	add	r3, r2
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b16      	ldr	r3, [pc, #88]	; (8005bd0 <ETH_SetDMAConfig+0x104>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6811      	ldr	r1, [r2, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	f241 1304 	movw	r3, #4356	; 0x1104
 8005b86:	440b      	add	r3, r1
 8005b88:	601a      	str	r2, [r3, #0]

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	7f1b      	ldrb	r3, [r3, #28]
 8005b8e:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	f241 1308 	movw	r3, #4360	; 0x1108
 8005ba0:	4413      	add	r3, r2
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	4b0b      	ldr	r3, [pc, #44]	; (8005bd4 <ETH_SetDMAConfig+0x108>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6811      	ldr	r1, [r2, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	f241 1308 	movw	r3, #4360	; 0x1108
 8005bb4:	440b      	add	r3, r1
 8005bb6:	601a      	str	r2, [r3, #0]
        }
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	ffff87fd 	.word	0xffff87fd
 8005bc8:	ffff2ffe 	.word	0xffff2ffe
 8005bcc:	fffec000 	.word	0xfffec000
 8005bd0:	ffc0efef 	.word	0xffc0efef
 8005bd4:	7fc0ffff 	.word	0x7fc0ffff

08005bd8 <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b0a4      	sub	sp, #144	; 0x90
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005be6:	2300      	movs	r3, #0
 8005be8:	653b      	str	r3, [r7, #80]	; 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c18:	647b      	str	r3, [r7, #68]	; 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	66bb      	str	r3, [r7, #104]	; 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005c24:	2300      	movs	r3, #0
 8005c26:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005c30:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005c34:	663b      	str	r3, [r7, #96]	; 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34
            macDefaultConf.Jabber = ENABLE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005c52:	2300      	movs	r3, #0
 8005c54:	67fb      	str	r3, [r7, #124]	; 0x7c
            macDefaultConf.PauseTime = 0x0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	677b      	str	r3, [r7, #116]	; 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	65bb      	str	r3, [r7, #88]	; 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005c70:	2320      	movs	r3, #32
 8005c72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005c82:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8005c88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c8c:	643b      	str	r3, [r7, #64]	; 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005c94:	2302      	movs	r3, #2
 8005c96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
            macDefaultConf.Watchdog = ENABLE;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	673b      	str	r3, [r7, #112]	; 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 8005cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff fde6 	bl	8005894 <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005ce2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ce6:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005cec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005cf0:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 8005cf8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005cfc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 8005cfe:	f107 0308 	add.w	r3, r7, #8
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff fee1 	bl	8005acc <ETH_SetDMAConfig>
        }
 8005d0a:	bf00      	nop
 8005d0c:	3790      	adds	r7, #144	; 0x90
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d24:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d2c:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 8005d2e:	f7fc f98d 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8005d32:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d908      	bls.n	8005d4e <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d804      	bhi.n	8005d4e <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e027      	b.n	8005d9e <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d908      	bls.n	8005d68 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d204      	bcs.n	8005d68 <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	e01a      	b.n	8005d9e <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4a13      	ldr	r2, [pc, #76]	; (8005db8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d303      	bcc.n	8005d78 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4a12      	ldr	r2, [pc, #72]	; (8005dbc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d911      	bls.n	8005d9c <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4a10      	ldr	r2, [pc, #64]	; (8005dbc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d908      	bls.n	8005d92 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4a0f      	ldr	r2, [pc, #60]	; (8005dc0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d804      	bhi.n	8005d92 <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	e005      	b.n	8005d9e <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	e000      	b.n	8005d9e <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 8005d9c:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        }
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	01312cff 	.word	0x01312cff
 8005db4:	02160ebf 	.word	0x02160ebf
 8005db8:	03938700 	.word	0x03938700
 8005dbc:	05f5e0ff 	.word	0x05f5e0ff
 8005dc0:	08f0d17f 	.word	0x08f0d17f

08005dc4 <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e01d      	b.n	8005e0e <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68d9      	ldr	r1, [r3, #12]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	4413      	add	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	440b      	add	r3, r1
 8005de2:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2200      	movs	r2, #0
 8005dee:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2200      	movs	r2, #0
 8005df4:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	3206      	adds	r2, #6
 8005e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d9de      	bls.n	8005dd2 <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	629a      	str	r2, [r3, #40]	; 0x28
            heth->TxDescList.TailTxDesc = 0;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	f241 132c 	movw	r3, #4396	; 0x112c
 8005e28:	4413      	add	r3, r2
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	601a      	str	r2, [r3, #0]

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68d9      	ldr	r1, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	f241 1314 	movw	r3, #4372	; 0x1114
 8005e3a:	4413      	add	r3, r2
 8005e3c:	6019      	str	r1, [r3, #0]

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005e4a:	601a      	str	r2, [r3, #0]
        }
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	e023      	b.n	8005eae <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6919      	ldr	r1, [r3, #16]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	440b      	add	r3, r1
 8005e76:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2200      	movs	r2, #0
 8005e82:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2200      	movs	r2, #0
 8005e88:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2200      	movs	r2, #0
 8005e94:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors adresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	320c      	adds	r2, #12
 8005ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d9d8      	bls.n	8005e66 <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	645a      	str	r2, [r3, #68]	; 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	649a      	str	r2, [r3, #72]	; 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	651a      	str	r2, [r3, #80]	; 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	f241 1330 	movw	r3, #4400	; 0x1130
 8005eda:	4413      	add	r3, r2
 8005edc:	2203      	movs	r2, #3
 8005ede:	601a      	str	r2, [r3, #0]

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6919      	ldr	r1, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	f241 131c 	movw	r3, #4380	; 0x111c
 8005eec:	4413      	add	r3, r2
 8005eee:	6019      	str	r1, [r3, #0]

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	f241 1328 	movw	r3, #4392	; 0x1128
 8005f00:	4413      	add	r3, r2
 8005f02:	6019      	str	r1, [r3, #0]
        }
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <__libc_init_array>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4d0d      	ldr	r5, [pc, #52]	; (8005f48 <__libc_init_array+0x38>)
 8005f14:	4c0d      	ldr	r4, [pc, #52]	; (8005f4c <__libc_init_array+0x3c>)
 8005f16:	1b64      	subs	r4, r4, r5
 8005f18:	10a4      	asrs	r4, r4, #2
 8005f1a:	2600      	movs	r6, #0
 8005f1c:	42a6      	cmp	r6, r4
 8005f1e:	d109      	bne.n	8005f34 <__libc_init_array+0x24>
 8005f20:	4d0b      	ldr	r5, [pc, #44]	; (8005f50 <__libc_init_array+0x40>)
 8005f22:	4c0c      	ldr	r4, [pc, #48]	; (8005f54 <__libc_init_array+0x44>)
 8005f24:	f000 f8f6 	bl	8006114 <_init>
 8005f28:	1b64      	subs	r4, r4, r5
 8005f2a:	10a4      	asrs	r4, r4, #2
 8005f2c:	2600      	movs	r6, #0
 8005f2e:	42a6      	cmp	r6, r4
 8005f30:	d105      	bne.n	8005f3e <__libc_init_array+0x2e>
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f38:	4798      	blx	r3
 8005f3a:	3601      	adds	r6, #1
 8005f3c:	e7ee      	b.n	8005f1c <__libc_init_array+0xc>
 8005f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f42:	4798      	blx	r3
 8005f44:	3601      	adds	r6, #1
 8005f46:	e7f2      	b.n	8005f2e <__libc_init_array+0x1e>
 8005f48:	080061e4 	.word	0x080061e4
 8005f4c:	080061e4 	.word	0x080061e4
 8005f50:	080061e4 	.word	0x080061e4
 8005f54:	080061e8 	.word	0x080061e8

08005f58 <__retarget_lock_acquire_recursive>:
 8005f58:	4770      	bx	lr

08005f5a <__retarget_lock_release_recursive>:
 8005f5a:	4770      	bx	lr

08005f5c <memcpy>:
 8005f5c:	440a      	add	r2, r1
 8005f5e:	4291      	cmp	r1, r2
 8005f60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f64:	d100      	bne.n	8005f68 <memcpy+0xc>
 8005f66:	4770      	bx	lr
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f72:	4291      	cmp	r1, r2
 8005f74:	d1f9      	bne.n	8005f6a <memcpy+0xe>
 8005f76:	bd10      	pop	{r4, pc}

08005f78 <memset>:
 8005f78:	4402      	add	r2, r0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d100      	bne.n	8005f82 <memset+0xa>
 8005f80:	4770      	bx	lr
 8005f82:	f803 1b01 	strb.w	r1, [r3], #1
 8005f86:	e7f9      	b.n	8005f7c <memset+0x4>

08005f88 <cleanup_glue>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	6809      	ldr	r1, [r1, #0]
 8005f8e:	4605      	mov	r5, r0
 8005f90:	b109      	cbz	r1, 8005f96 <cleanup_glue+0xe>
 8005f92:	f7ff fff9 	bl	8005f88 <cleanup_glue>
 8005f96:	4621      	mov	r1, r4
 8005f98:	4628      	mov	r0, r5
 8005f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f9e:	f000 b869 	b.w	8006074 <_free_r>
	...

08005fa4 <_reclaim_reent>:
 8005fa4:	4b2c      	ldr	r3, [pc, #176]	; (8006058 <_reclaim_reent+0xb4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4283      	cmp	r3, r0
 8005faa:	b570      	push	{r4, r5, r6, lr}
 8005fac:	4604      	mov	r4, r0
 8005fae:	d051      	beq.n	8006054 <_reclaim_reent+0xb0>
 8005fb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005fb2:	b143      	cbz	r3, 8005fc6 <_reclaim_reent+0x22>
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d14a      	bne.n	8006050 <_reclaim_reent+0xac>
 8005fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fbc:	6819      	ldr	r1, [r3, #0]
 8005fbe:	b111      	cbz	r1, 8005fc6 <_reclaim_reent+0x22>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f857 	bl	8006074 <_free_r>
 8005fc6:	6961      	ldr	r1, [r4, #20]
 8005fc8:	b111      	cbz	r1, 8005fd0 <_reclaim_reent+0x2c>
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f852 	bl	8006074 <_free_r>
 8005fd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005fd2:	b111      	cbz	r1, 8005fda <_reclaim_reent+0x36>
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f000 f84d 	bl	8006074 <_free_r>
 8005fda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fdc:	b111      	cbz	r1, 8005fe4 <_reclaim_reent+0x40>
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 f848 	bl	8006074 <_free_r>
 8005fe4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005fe6:	b111      	cbz	r1, 8005fee <_reclaim_reent+0x4a>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f843 	bl	8006074 <_free_r>
 8005fee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005ff0:	b111      	cbz	r1, 8005ff8 <_reclaim_reent+0x54>
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 f83e 	bl	8006074 <_free_r>
 8005ff8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005ffa:	b111      	cbz	r1, 8006002 <_reclaim_reent+0x5e>
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 f839 	bl	8006074 <_free_r>
 8006002:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006004:	b111      	cbz	r1, 800600c <_reclaim_reent+0x68>
 8006006:	4620      	mov	r0, r4
 8006008:	f000 f834 	bl	8006074 <_free_r>
 800600c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800600e:	b111      	cbz	r1, 8006016 <_reclaim_reent+0x72>
 8006010:	4620      	mov	r0, r4
 8006012:	f000 f82f 	bl	8006074 <_free_r>
 8006016:	69a3      	ldr	r3, [r4, #24]
 8006018:	b1e3      	cbz	r3, 8006054 <_reclaim_reent+0xb0>
 800601a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800601c:	4620      	mov	r0, r4
 800601e:	4798      	blx	r3
 8006020:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006022:	b1b9      	cbz	r1, 8006054 <_reclaim_reent+0xb0>
 8006024:	4620      	mov	r0, r4
 8006026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800602a:	f7ff bfad 	b.w	8005f88 <cleanup_glue>
 800602e:	5949      	ldr	r1, [r1, r5]
 8006030:	b941      	cbnz	r1, 8006044 <_reclaim_reent+0xa0>
 8006032:	3504      	adds	r5, #4
 8006034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006036:	2d80      	cmp	r5, #128	; 0x80
 8006038:	68d9      	ldr	r1, [r3, #12]
 800603a:	d1f8      	bne.n	800602e <_reclaim_reent+0x8a>
 800603c:	4620      	mov	r0, r4
 800603e:	f000 f819 	bl	8006074 <_free_r>
 8006042:	e7ba      	b.n	8005fba <_reclaim_reent+0x16>
 8006044:	680e      	ldr	r6, [r1, #0]
 8006046:	4620      	mov	r0, r4
 8006048:	f000 f814 	bl	8006074 <_free_r>
 800604c:	4631      	mov	r1, r6
 800604e:	e7ef      	b.n	8006030 <_reclaim_reent+0x8c>
 8006050:	2500      	movs	r5, #0
 8006052:	e7ef      	b.n	8006034 <_reclaim_reent+0x90>
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	bf00      	nop
 8006058:	24000014 	.word	0x24000014

0800605c <__malloc_lock>:
 800605c:	4801      	ldr	r0, [pc, #4]	; (8006064 <__malloc_lock+0x8>)
 800605e:	f7ff bf7b 	b.w	8005f58 <__retarget_lock_acquire_recursive>
 8006062:	bf00      	nop
 8006064:	24004c78 	.word	0x24004c78

08006068 <__malloc_unlock>:
 8006068:	4801      	ldr	r0, [pc, #4]	; (8006070 <__malloc_unlock+0x8>)
 800606a:	f7ff bf76 	b.w	8005f5a <__retarget_lock_release_recursive>
 800606e:	bf00      	nop
 8006070:	24004c78 	.word	0x24004c78

08006074 <_free_r>:
 8006074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006076:	2900      	cmp	r1, #0
 8006078:	d048      	beq.n	800610c <_free_r+0x98>
 800607a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800607e:	9001      	str	r0, [sp, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f1a1 0404 	sub.w	r4, r1, #4
 8006086:	bfb8      	it	lt
 8006088:	18e4      	addlt	r4, r4, r3
 800608a:	f7ff ffe7 	bl	800605c <__malloc_lock>
 800608e:	4a20      	ldr	r2, [pc, #128]	; (8006110 <_free_r+0x9c>)
 8006090:	9801      	ldr	r0, [sp, #4]
 8006092:	6813      	ldr	r3, [r2, #0]
 8006094:	4615      	mov	r5, r2
 8006096:	b933      	cbnz	r3, 80060a6 <_free_r+0x32>
 8006098:	6063      	str	r3, [r4, #4]
 800609a:	6014      	str	r4, [r2, #0]
 800609c:	b003      	add	sp, #12
 800609e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060a2:	f7ff bfe1 	b.w	8006068 <__malloc_unlock>
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	d90b      	bls.n	80060c2 <_free_r+0x4e>
 80060aa:	6821      	ldr	r1, [r4, #0]
 80060ac:	1862      	adds	r2, r4, r1
 80060ae:	4293      	cmp	r3, r2
 80060b0:	bf04      	itt	eq
 80060b2:	681a      	ldreq	r2, [r3, #0]
 80060b4:	685b      	ldreq	r3, [r3, #4]
 80060b6:	6063      	str	r3, [r4, #4]
 80060b8:	bf04      	itt	eq
 80060ba:	1852      	addeq	r2, r2, r1
 80060bc:	6022      	streq	r2, [r4, #0]
 80060be:	602c      	str	r4, [r5, #0]
 80060c0:	e7ec      	b.n	800609c <_free_r+0x28>
 80060c2:	461a      	mov	r2, r3
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	b10b      	cbz	r3, 80060cc <_free_r+0x58>
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d9fa      	bls.n	80060c2 <_free_r+0x4e>
 80060cc:	6811      	ldr	r1, [r2, #0]
 80060ce:	1855      	adds	r5, r2, r1
 80060d0:	42a5      	cmp	r5, r4
 80060d2:	d10b      	bne.n	80060ec <_free_r+0x78>
 80060d4:	6824      	ldr	r4, [r4, #0]
 80060d6:	4421      	add	r1, r4
 80060d8:	1854      	adds	r4, r2, r1
 80060da:	42a3      	cmp	r3, r4
 80060dc:	6011      	str	r1, [r2, #0]
 80060de:	d1dd      	bne.n	800609c <_free_r+0x28>
 80060e0:	681c      	ldr	r4, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	6053      	str	r3, [r2, #4]
 80060e6:	4421      	add	r1, r4
 80060e8:	6011      	str	r1, [r2, #0]
 80060ea:	e7d7      	b.n	800609c <_free_r+0x28>
 80060ec:	d902      	bls.n	80060f4 <_free_r+0x80>
 80060ee:	230c      	movs	r3, #12
 80060f0:	6003      	str	r3, [r0, #0]
 80060f2:	e7d3      	b.n	800609c <_free_r+0x28>
 80060f4:	6825      	ldr	r5, [r4, #0]
 80060f6:	1961      	adds	r1, r4, r5
 80060f8:	428b      	cmp	r3, r1
 80060fa:	bf04      	itt	eq
 80060fc:	6819      	ldreq	r1, [r3, #0]
 80060fe:	685b      	ldreq	r3, [r3, #4]
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	bf04      	itt	eq
 8006104:	1949      	addeq	r1, r1, r5
 8006106:	6021      	streq	r1, [r4, #0]
 8006108:	6054      	str	r4, [r2, #4]
 800610a:	e7c7      	b.n	800609c <_free_r+0x28>
 800610c:	b003      	add	sp, #12
 800610e:	bd30      	pop	{r4, r5, pc}
 8006110:	24004b34 	.word	0x24004b34

08006114 <_init>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	bf00      	nop
 8006118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611a:	bc08      	pop	{r3}
 800611c:	469e      	mov	lr, r3
 800611e:	4770      	bx	lr

08006120 <_fini>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	bf00      	nop
 8006124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006126:	bc08      	pop	{r3}
 8006128:	469e      	mov	lr, r3
 800612a:	4770      	bx	lr
